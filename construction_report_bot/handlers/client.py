"""–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤, –∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
—Å —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
"""

import logging
from aiogram import Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery, User
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, List, Union
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
import os

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from construction_report_bot.middlewares.role_check import client_required
from construction_report_bot.database.crud import (
    get_report_by_id, get_report_with_relations, get_reports_by_object, get_today_reports,
    get_client_by_user_id, get_reports_by_type, get_reports_by_date
)
from construction_report_bot.database.session import get_session
from construction_report_bot.config.keyboards import get_report_filter_keyboard, get_back_keyboard
from construction_report_bot.config.settings import settings
from construction_report_bot.utils.decorators import with_session, error_handler
from construction_report_bot.database.models import Report, Client

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
client_router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
client_router.message.middleware(client_required())
client_router.callback_query.middleware(client_required())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
class ReportFilterStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.
    
    Attributes:
        waiting_for_date: –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
        waiting_for_object: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
        waiting_for_report_type: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    """
    waiting_for_date = State()
    waiting_for_object = State()
    waiting_for_report_type = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
@client_router.message(F.text == "üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤")
async def cmd_report_history(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    await message.answer(
        "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
        reply_markup=get_report_filter_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
@client_router.message(F.text == "üìë –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
@with_session
async def cmd_today_report(message: Message, session: AsyncSession, state: FSMContext, **data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = data["user"]
        client = await get_client_by_user_id(session, user.id)
        
        if not client:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
        objects = client.objects
        
        if not objects:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞)
        object_id = objects[0].id
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"–ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ID: {object_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        reports = await get_today_reports(session, object_id)
        
        if reports:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
            await display_reports_list(message, reports, f"üìë –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')}):", state)
        else:
            logging.info(f"–û—Ç—á–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await message.answer(
                f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')}) "
                f"–æ—Ç—á–µ—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –æ–±—ä–µ–∫—Ç–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            )
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}", exc_info=True)
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
@client_router.callback_query(F.data == "filter_date")
async def process_filter_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    
    await state.set_state(ReportFilterStates.waiting_for_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
@client_router.message(ReportFilterStates.waiting_for_date)
@with_session
async def process_date_input(message: Message, state: FSMContext, session: AsyncSession, **data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    date_str = message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        filter_date = datetime.strptime(date_str, '%d.%m.%Y')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        user = data["user"]
        client = await get_client_by_user_id(session, user.id)
        
        if not client:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
        reports = await get_reports_by_date(session, filter_date)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –∫–ª–∏–µ–Ω—Ç–∞
        filtered_reports = await filter_reports_by_client_objects(reports, client)
        
        if filtered_reports:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
            await display_reports_list(
                message, 
                filtered_reports, 
                f"üìä –û—Ç—á–µ—Ç—ã –∑–∞ {date_str}:", 
                state
            )
        else:
            await message.answer(
                f"–ó–∞ {date_str} –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –æ–±—ä–µ–∫—Ç–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_back_keyboard()
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ: {str(e)}", exc_info=True)
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}",
            reply_markup=get_back_keyboard()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É
@client_router.callback_query(F.data == "filter_object")
@with_session
async def process_filter_object(callback: CallbackQuery, state: FSMContext, session: AsyncSession, **data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç—É"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        user = data["user"]
        client = await get_client_by_user_id(session, user.id)
        
        if not client or not client.objects:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        objects_text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:\n\n"
        for i, obj in enumerate(client.objects, start=1):
            objects_text += f"{i}. {obj.name}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        builder = InlineKeyboardBuilder()
        for i, obj in enumerate(client.objects, start=1):
            builder.row(InlineKeyboardButton(
                text=f"{i}. {obj.name}",
                callback_data=f"select_object_{obj.id}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        builder.row(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_filters"
        ))
        
        await callback.message.edit_text(
            objects_text,
            reply_markup=builder.as_markup()
        )
        await state.set_state(ReportFilterStates.waiting_for_object)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(objects={i: obj.id for i, obj in enumerate(client.objects, start=1)})
    except Exception as e:
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@client_router.callback_query(F.data.startswith("select_object_"))
@with_session
async def process_object_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
        object_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç—É
        reports = await get_reports_by_object(session, object_id)
        
        if reports:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
            await display_reports_list(callback, reports, "–û—Ç—á–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É:", state, edit=True)
        else:
            # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º",
                callback_data="back_to_filters"
            ))
            
            await callback.message.edit_text(
                "–ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=builder.as_markup()
            )
    except Exception as e:
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –æ—Ç—á–µ—Ç–∞
@client_router.callback_query(F.data == "filter_report_type")
async def process_filter_report_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É"""
    await callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="1. –£—Ç—Ä–µ–Ω–Ω–∏–π",
        callback_data="select_report_type_morning"
    ))
    builder.row(InlineKeyboardButton(
        text="2. –í–µ—á–µ—Ä–Ω–∏–π",
        callback_data="select_report_type_evening"
    ))
    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_filters"
    ))
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(ReportFilterStates.waiting_for_report_type)

# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏

async def filter_reports_by_client_objects(reports: List[Report], client: Client) -> List[Report]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –∫–ª–∏–µ–Ω—Ç–∞"""
    client_object_ids = [obj.id for obj in client.objects]
    return [report for report in reports if report.object_id in client_object_ids]

async def display_reports_list(message: Union[Message, CallbackQuery], reports: List[Report], 
                             title: str, state: FSMContext, edit: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫"""
    if not reports:
        # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º",
            callback_data="back_to_filters"
        ))
        
        if edit and isinstance(message, CallbackQuery):
            await message.message.edit_text(
                f"–û—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=builder.as_markup()
            )
        else:
            await message.answer(
                f"–û—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=builder.as_markup()
            )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö
    reports_text = f"{title}\n\n"
    reports_text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    builder = InlineKeyboardBuilder()
    
    for i, report in enumerate(reports, start=1):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç—á–µ—Ç–µ
        button_text = f"{i}. {report.date.strftime('%d.%m.%Y')} - {report.object.name}"
        builder.row(InlineKeyboardButton(
            text=button_text,
            callback_data=f"view_report_{report.id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º"
    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º",
        callback_data="back_to_filters"
    ))
    
    if edit and isinstance(message, CallbackQuery):
        await message.message.edit_text(
            reports_text,
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            reports_text,
            reply_markup=builder.as_markup()
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(reports={i: report.id for i, report in enumerate(reports, start=1)})

async def display_report_details(message: Union[Message, CallbackQuery], report: Report, edit: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç—á–µ—Ç–µ"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç—á–µ—Ç–µ
    report_text = f"üìä –û—Ç—á–µ—Ç #{report.id}\n\n"
    report_text += f"–î–∞—Ç–∞: {report.date.strftime('%d.%m.%Y')}\n"
    report_text += f"–¢–∏–ø: {'–£—Ç—Ä–µ–Ω–Ω–∏–π' if report.type == 'morning' else '–í–µ—á–µ—Ä–Ω–∏–π'}\n"
    report_text += f"–û–±—ä–µ–∫—Ç: {report.object.name}\n"
    report_text += f"–¢–∏–ø —Ä–∞–±–æ—Ç: {report.report_type}\n"
    
    if report.work_subtype:
        report_text += f"–ü–æ–¥—Ç–∏–ø —Ä–∞–±–æ—Ç: {report.work_subtype}\n"
    
    report_text += f"–°—Ç–∞—Ç—É—Å: {'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' if report.status == 'sent' else '–ß–µ—Ä–Ω–æ–≤–∏–∫'}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ
    if report.itr_personnel:
        report_text += "–ò–¢–† –ø–µ—Ä—Å–æ–Ω–∞–ª:\n"
        for itr in report.itr_personnel:
            report_text += f"- {itr.full_name}\n"
        report_text += "\n"
    
    if report.workers:
        report_text += "–†–∞–±–æ—á–∏–µ:\n"
        for worker in report.workers:
            report_text += f"- {worker.full_name}\n"
        report_text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
    if report.equipment:
        report_text += "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:\n"
        for equip in report.equipment:
            report_text += f"- {equip.name}\n"
        report_text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if report.comments:
        report_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {report.comments}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="üìÑ –°–∫–∞—á–∞—Ç—å PDF",
        callback_data=f"client_export_pdf_{report.id}"
    ))
    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤",
        callback_data="back_to_reports_list"
    ))
    
    if edit and isinstance(message, CallbackQuery):
        await message.message.edit_text(
            report_text,
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            report_text,
            reply_markup=builder.as_markup()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@client_router.callback_query(F.data.startswith("select_report_type_"))
@with_session
async def process_report_type_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession, **data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        report_type = callback.data.split("_")[3]  # morning –∏–ª–∏ evening
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        user = data["user"]
        client = await get_client_by_user_id(session, user.id)
        
        if not client:
            await callback.message.edit_text(
                "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ —Ç–∏–ø—É
        reports = await get_reports_by_type(session, report_type)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –∫–ª–∏–µ–Ω—Ç–∞
        filtered_reports = await filter_reports_by_client_objects(reports, client)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
        await display_reports_list(callback, filtered_reports, f"–û—Ç—á–µ—Ç—ã —Ç–∏–ø–∞ {type_name}:", state, edit=True)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}",
            reply_markup=get_back_keyboard()
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@client_router.message(ReportFilterStates.waiting_for_report_type)
@with_session
async def process_report_type_input(message: Message, state: FSMContext, session: AsyncSession, **data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    report_type = message.text.strip()
    
    if report_type == "1":
        report_type = "morning"
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π"
    elif report_type == "2":
        report_type = "evening"
        type_name = "–í–µ—á–µ—Ä–Ω–∏–π"
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ 1 (–£—Ç—Ä–µ–Ω–Ω–∏–π) –∏–ª–∏ 2 (–í–µ—á–µ—Ä–Ω–∏–π).")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        user = data["user"]
        client = await get_client_by_user_id(session, user.id)
        
        if not client:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ —Ç–∏–ø—É
        reports = await get_reports_by_type(session, report_type)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –∫–ª–∏–µ–Ω—Ç–∞
        filtered_reports = await filter_reports_by_client_objects(reports, client)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
        await display_reports_list(message, filtered_reports, f"–û—Ç—á–µ—Ç—ã —Ç–∏–ø–∞ {type_name}:", state)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É: {str(e)}", exc_info=True)
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞
@client_router.callback_query(F.data.startswith("view_report_"))
@with_session
async def process_view_report(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        report_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
        report = await get_report_with_relations(session, report_id)
        
        if report:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ
            await display_report_details(callback, report, edit=True)
        else:
            await callback.message.edit_text(
                "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_back_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç—á–µ—Ç–∞: {str(e)}",
            reply_markup=get_back_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤
@client_router.callback_query(F.data == "back_to_reports_list")
async def process_back_to_reports_list(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
    if "reports" in state_data:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤
        # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
        await callback.message.edit_text(
            "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
            reply_markup=get_report_filter_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
        await callback.message.edit_text(
            "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
            reply_markup=get_report_filter_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@client_router.callback_query(F.data == "filter_reset")
async def process_filter_reset(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await callback.answer("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    
    await callback.message.edit_text(
        "–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä:",
        reply_markup=get_report_filter_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
@client_router.callback_query(F.data == "back_to_filters")
async def process_back_to_filters(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    await callback.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await callback.message.edit_text(
        "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
        reply_markup=get_report_filter_keyboard()
    )

@client_router.callback_query(F.data.startswith("client_export_pdf_"))
@error_handler
@with_session
async def process_client_export_pdf(callback: CallbackQuery, session: AsyncSession, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        report_id = int(callback.data.split("_")[3])  # –ò–∑–º–µ–Ω–µ–Ω –∏–Ω–¥–µ–∫—Å –∏–∑-–∑–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        logging.info(f"[process_client_export_pdf] –ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ #{report_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∏–∑ –ë–î
        report = await get_report_with_relations(session, report_id)
        if not report:
            logging.warning(f"[process_client_export_pdf] –û—Ç—á–µ—Ç #{report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await callback.message.edit_text(
                "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_back_keyboard()
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –æ—Ç—á–µ—Ç—É
        client = await get_client_by_user_id(session, user.id)
        if not client or report.object_id not in [obj.id for obj in client.objects]:
            logging.warning(f"[process_client_export_pdf] –ö–ª–∏–µ–Ω—Ç {user.id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç—á–µ—Ç—É #{report_id}")
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ—Ç—á–µ—Ç—É.",
                reply_markup=get_back_keyboard()
            )
            return
        
        logging.info(f"[process_client_export_pdf] –û—Ç—á–µ—Ç #{report_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ë–î")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        export_dir = os.path.join(settings.BASE_DIR, settings.EXPORT_DIR)
        os.makedirs(export_dir, exist_ok=True)
        logging.info(f"[process_client_export_pdf] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_dir}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"report_{report_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(export_dir, filename)
        logging.info(f"[process_client_export_pdf] –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF: {filepath}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ PDF
        from construction_report_bot.utils.export_utils import export_report_to_pdf
        logging.info("[process_client_export_pdf] –ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF")
        try:
            export_report_to_pdf([report], filepath)
            logging.info("[process_client_export_pdf] PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            logging.error(f"[process_client_export_pdf] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}", exc_info=True)
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
        from aiogram.types import FSInputFile
        document = FSInputFile(filepath)
        logging.info("[process_client_export_pdf] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        try:
            await callback.message.answer_document(
                document=document,
                caption=f"üìÑ –û—Ç—á–µ—Ç #{report_id} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PDF"
            )
            logging.info("[process_client_export_pdf] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logging.error(f"[process_client_export_pdf] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", exc_info=True)
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞",
                reply_markup=get_back_keyboard()
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(filepath)
                logging.info("[process_client_export_pdf] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logging.error(f"[process_client_export_pdf] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤
        await callback.message.edit_text(
            "–û—Ç—á–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É:",
            reply_markup=get_back_keyboard()
        )
        logging.info("[process_client_export_pdf] –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logging.error(f"[process_client_export_pdf] –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞ –≤ PDF: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞ –≤ PDF",
            reply_markup=get_back_keyboard()
        )

def register_client_handlers(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞.
    
    Args:
        dp: –û–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    dp.include_router(client_router) 
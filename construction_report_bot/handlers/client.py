"""–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤, –∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
—Å —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
"""

import logging
from aiogram import Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery, User
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, List, Union, Dict
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
import os

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from construction_report_bot.middlewares.role_check import client_required
from construction_report_bot.database.crud import (
    get_report_by_id, get_report_with_relations, get_reports_by_object, get_today_reports,
    get_client_by_user_id, get_reports_by_type, get_reports_by_date, get_object_by_id
)
from construction_report_bot.database.session import get_session
from construction_report_bot.config.keyboards import (
    get_report_filter_keyboard, get_back_keyboard, create_report_type_keyboard,
    create_object_keyboard, create_reports_list_keyboard
)
from construction_report_bot.config.settings import settings
from construction_report_bot.utils.decorators import with_session, error_handler
from construction_report_bot.utils.utils import (
    handle_error, get_object_info, format_datetime, check_reports_exist
)
from construction_report_bot.database.models import Report, Client, Object

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
client_router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
client_router.message.middleware(client_required())
client_router.callback_query.middleware(client_required())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
class ReportFilterStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.
    
    Attributes:
        waiting_for_date: –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
        waiting_for_object: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
        waiting_for_report_type: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    """
    waiting_for_date = State()
    waiting_for_object = State()
    waiting_for_report_type = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
@client_router.message(F.text == "üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤")
@with_session
async def cmd_report_history(message: Message, session: AsyncSession, state: FSMContext, **data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        user = data["user"]
        client = await get_client_by_user_id(session, user.id)
        
        if not client:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        objects = client.objects
        if not objects:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        objects_list = [{"id": obj.id, "name": obj.name} for obj in objects]
        keyboard = create_object_keyboard(objects_list, "back_to_main")
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        await handle_error(message, e)

@client_router.callback_query(F.data.startswith("history_object_"))
@with_session
async def process_history_object(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        object_id = int(callback.data.split('_')[-1])
        object_info, object_name = await get_object_info(session, object_id)
        
        if not object_info:
            await callback.message.edit_text("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        reports = await get_reports_by_object(session, object_id)
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
        dates = {}
        for report in reports:
            date_str = report.date.strftime('%Y-%m-%d')
            if date_str not in dates:
                dates[date_str] = []
            dates[date_str].append(report)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
        keyboard = []
        for date_str in sorted(dates.keys(), reverse=True):
            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
            date_str, _ = format_datetime(date_obj)
            report_count = len(dates[date_str])
            
            keyboard.append([InlineKeyboardButton(
                text=f"üìÖ {date_str} ({report_count} –æ—Ç—á–µ—Ç–æ–≤)",
                callback_data=f"history_date_{object_id}_{date_str}"
            )])
        
        keyboard.append([InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤",
            callback_data="back_to_history"
        )])
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç—É {object_name}:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data.startswith("history_date_"))
@with_session
async def process_history_date(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        _, _, object_id, date_str = callback.data.split('_')
        object_id = int(object_id)
        
        object_info, object_name = await get_object_info(session, object_id)
        if not object_info:
            await callback.message.edit_text("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        reports = await get_reports_by_object(session, object_id)
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
        reports = [r for r in reports if r.date.date() == date_obj.date()]
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
        keyboard = create_report_type_keyboard(reports, object_id, date_str)
        
        date_str, _ = format_datetime(date_obj)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∑–∞ {date_str}:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data.startswith("history_type_"))
@with_session
async def process_history_type(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        _, _, object_id, date_str, report_type = callback.data.split('_')
        object_id = int(object_id)
        
        object_info, object_name = await get_object_info(session, object_id)
        if not object_info:
            await callback.message.edit_text("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        reports = await get_reports_by_object(session, object_id)
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ –∏ —Ç–∏–ø—É
        reports = [r for r in reports if r.date.date() == date_obj.date() and r.type == report_type]
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö
        date_str, _ = format_datetime(date_obj)
        reports_text = f"{type_name} –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∑–∞ {date_str}:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –æ—Ç—á–µ—Ç–µ
        for i, report in enumerate(reports, start=1):
            time_str = report.date.strftime("%H:%M")
            reports_text += f"{i}. {time_str} - {report.report_type or '–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã'}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF",
                    callback_data=f"client_export_pdf_{object_id}_{date_str}_{report_type}"
                )
            ],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞",
                callback_data=f"history_date_{object_id}_{date_str}"
            )]
        ]
        
        await callback.message.edit_text(
            reports_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data == "back_to_history")
async def process_back_to_history(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        await cmd_report_history(callback.message, callback.message.bot.session, callback.message.bot.state)
    except Exception as e:
        await handle_error(callback, e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
@client_router.message(F.text == "üìë –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
@with_session
async def cmd_today_report(message: Message, session: AsyncSession, state: FSMContext, **data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = data["user"]
        client = await get_client_by_user_id(session, user.id)
        
        if not client:
            await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
        objects = client.objects
        
        if not objects:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        objects_list = [{"id": obj.id, "name": obj.name} for obj in objects]
        keyboard = create_object_keyboard(objects_list, "back_to_main", "today_report_object_")
        
        await message.answer(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        await handle_error(message, e)

@client_router.callback_query(F.data.startswith("today_report_object_"))
@with_session
async def process_today_report_object(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
        object_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        reports = await get_today_reports(session, object_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        object_info, object_name = await get_object_info(session, object_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_object_id=object_id)
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ —Ç–∏–ø—É (—É—Ç—Ä–µ–Ω–Ω–∏–π/–≤–µ—á–µ—Ä–Ω–∏–π)
        morning_reports = [r for r in reports if r.type == "morning"]
        evening_reports = [r for r in reports if r.type == "evening"]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
        keyboard = []
        
        if morning_reports:
            keyboard.append([InlineKeyboardButton(
                text=f"üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π ({len(morning_reports)} –æ—Ç—á–µ—Ç–æ–≤)",
                callback_data=f"today_report_type_{object_id}_morning"
            )])
        
        if evening_reports:
            keyboard.append([InlineKeyboardButton(
                text=f"üåÜ –í–µ—á–µ—Ä–Ω–∏–π ({len(evening_reports)} –æ—Ç—á–µ—Ç–æ–≤)",
                callback_data=f"today_report_type_{object_id}_evening"
            )])
        
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∑–∞ —Å–µ–≥–æ–¥–Ω—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data.startswith("today_report_type_"))
@with_session
async def process_today_report_type(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        parts = callback.data.split("_")
        object_id = int(parts[3])
        report_type = parts[4]
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ —Ç–∏–ø–∞
        reports = await get_today_reports(session, object_id, report_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        object_info, object_name = await get_object_info(session, object_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö
        date_str, _ = format_datetime(datetime.now())
        reports_text = f"{type_name} –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({date_str}):\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –æ—Ç—á–µ—Ç–µ
        for i, report in enumerate(reports, start=1):
            time_str = report.date.strftime("%H:%M")
            reports_text += f"{i}. {time_str} - {report.report_type or '–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã'}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF",
                    callback_data=f"client_export_pdf_{object_id}_{datetime.now().strftime('%d.%m.%Y')}_{report_type}"
                )
            ],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞",
                callback_data=f"today_report_object_{object_id}"
            )]
        ]
        
        await callback.message.edit_text(
            reports_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        await handle_error(callback, e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
@client_router.callback_query(F.data == "filter_date")
async def process_filter_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    
    await state.set_state(ReportFilterStates.waiting_for_date)

@client_router.message(ReportFilterStates.waiting_for_date)
@with_session
async def process_date_input(message: Message, state: FSMContext, session: AsyncSession, **data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    date_str = message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        filter_date = datetime.strptime(date_str, '%d.%m.%Y')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        user = data["user"]
        client = await get_client_by_user_id(session, user.id)
        
        if not client:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
        reports = await get_reports_by_date(session, filter_date)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –∫–ª–∏–µ–Ω—Ç–∞
        filtered_reports = await filter_reports_by_client_objects(reports, client)
        
        if filtered_reports:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
            reports_by_object = {}
            for report in filtered_reports:
                if report.object_id not in reports_by_object:
                    reports_by_object[report.object_id] = []
                reports_by_object[report.object_id].append(report)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
            keyboard = []
            for object_id, object_reports in reports_by_object.items():
                object_info, object_name = await get_object_info(session, object_id)
                report_count = len(object_reports)
                
                keyboard.append([InlineKeyboardButton(
                    text=f"üèóÔ∏è {object_name} ({report_count} –æ—Ç—á–µ—Ç–æ–≤)",
                    callback_data=f"filter_date_object_{object_id}_{date_str}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º",
                callback_data="back_to_filters"
            )])
            
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ {date_str}:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        else:
            await message.answer(
                f"–ó–∞ {date_str} –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –æ–±—ä–µ–∫—Ç–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_back_keyboard()
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
        )
    except Exception as e:
        await handle_error(message, e)
        await state.clear()

@client_router.callback_query(F.data.startswith("filter_date_object_"))
@with_session
async def process_filter_date_object(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏ –¥–∞—Ç—É –∏–∑ callback_data
        _, _, object_id, date_str = callback.data.split("_")
        object_id = int(object_id)
        date = datetime.strptime(date_str, '%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        reports = await get_reports_by_object(session, object_id)
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
        filtered_reports = [r for r in reports if r.date.date() == date.date()]
        
        if not await check_reports_exist(callback, filtered_reports, edit=True):
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
        keyboard = create_report_type_keyboard(filtered_reports, object_id, date_str)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        object_info, object_name = await get_object_info(session, object_id)
        
        date_str, _ = format_datetime(date)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∑–∞ {date_str}:",
            reply_markup=keyboard
        )
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data == "filter_object")
@with_session
async def process_filter_object(callback: CallbackQuery, state: FSMContext, session: AsyncSession, **data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç—É"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        user = data["user"]
        client = await get_client_by_user_id(session, user.id)
        
        if not client or not client.objects:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        objects_list = [{"id": obj.id, "name": obj.name} for obj in client.objects]
        keyboard = create_object_keyboard(objects_list)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:",
            reply_markup=keyboard
        )
        await state.set_state(ReportFilterStates.waiting_for_object)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(objects={i: obj.id for i, obj in enumerate(client.objects, start=1)})
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data.startswith("select_object_"))
@with_session
async def process_object_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
        object_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç—É
        reports = await get_reports_by_object(session, object_id)
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
        reports_by_date = {}
        for report in reports:
            date_str = report.date.strftime('%Y-%m-%d')
            if date_str not in reports_by_date:
                reports_by_date[date_str] = []
            reports_by_date[date_str].append(report)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
        keyboard = []
        for date_str, date_reports in sorted(reports_by_date.items(), reverse=True):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
            date_str, _ = format_datetime(date_obj)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –¥–∞—Ç—É
            report_count = len(date_reports)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–∞—Ç—ã
            keyboard.append([InlineKeyboardButton(
                text=f"üìÖ {date_str} ({report_count} –æ—Ç—á–µ—Ç–æ–≤)",
                callback_data=f"filter_object_date_{object_id}_{date_str}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º",
            callback_data="back_to_filters"
        )])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        object_info, object_name = await get_object_info(session, object_id)
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞ '{object_name}':",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        await handle_error(callback, e)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@client_router.callback_query(F.data.startswith("filter_object_date_"))
@with_session
async def process_filter_object_date(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏ –¥–∞—Ç—É –∏–∑ callback_data
        parts = callback.data.split("_")
        object_id = int(parts[3])
        date_str = parts[4]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –≤ –æ–±—ä–µ–∫—Ç datetime
        try:
            date = datetime.strptime(date_str, '%d.%m.%Y')
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
            date = datetime.strptime(date_str, '%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        reports = await get_reports_by_object(session, object_id)
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
        filtered_reports = [r for r in reports if r.date.date() == date.date()]
        
        if not await check_reports_exist(callback, filtered_reports, edit=True):
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
        keyboard = create_report_type_keyboard(filtered_reports, object_id, date_str)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        object_info, object_name = await get_object_info(session, object_id)
        
        date_str, _ = format_datetime(date)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∑–∞ {date_str}:",
            reply_markup=keyboard
        )
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data == "filter_report_type")
async def process_filter_report_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É"""
    await callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    keyboard = [
        [InlineKeyboardButton(text="1. –£—Ç—Ä–µ–Ω–Ω–∏–π", callback_data="select_report_type_morning")],
        [InlineKeyboardButton(text="2. –í–µ—á–µ—Ä–Ω–∏–π", callback_data="select_report_type_evening")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_filters")]
    ]
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    
    await state.set_state(ReportFilterStates.waiting_for_report_type)

@client_router.callback_query(F.data.startswith("select_report_type_"))
@with_session
async def process_report_type_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession, **data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        report_type = callback.data.split("_")[3]  # morning –∏–ª–∏ evening
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        user = data["user"]
        client = await get_client_by_user_id(session, user.id)
        
        if not client:
            await callback.message.edit_text(
                "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ —Ç–∏–ø—É
        reports = await get_reports_by_type(session, report_type)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –∫–ª–∏–µ–Ω—Ç–∞
        filtered_reports = await filter_reports_by_client_objects(reports, client)
        
        if not await check_reports_exist(callback, filtered_reports, edit=True):
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
        reports_by_object = {}
        for report in filtered_reports:
            if report.object_id not in reports_by_object:
                reports_by_object[report.object_id] = []
            reports_by_object[report.object_id].append(report)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
        keyboard = []
        for object_id, object_reports in reports_by_object.items():
            object_info, object_name = await get_object_info(session, object_id)
            report_count = len(object_reports)
            
            keyboard.append([InlineKeyboardButton(
                text=f"üèóÔ∏è {object_name} ({report_count} –æ—Ç—á–µ—Ç–æ–≤)",
                callback_data=f"filter_type_object_{object_id}_{report_type}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º",
            callback_data="back_to_filters"
        )])
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {type_name.lower()} –æ—Ç—á–µ—Ç–æ–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        await handle_error(callback, e)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@client_router.callback_query(F.data.startswith("filter_type_object_"))
@with_session
async def process_filter_type_object(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        _, _, object_id, report_type = callback.data.split("_")
        object_id = int(object_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        reports = await get_reports_by_object(session, object_id)
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ —Ç–∏–ø—É
        filtered_reports = [r for r in reports if r.type == report_type]
        
        if not await check_reports_exist(callback, filtered_reports, edit=True):
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
        reports_by_date = {}
        for report in filtered_reports:
            date_str = report.date.strftime('%Y-%m-%d')
            if date_str not in reports_by_date:
                reports_by_date[date_str] = []
            reports_by_date[date_str].append(report)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
        keyboard = []
        for date_str, date_reports in sorted(reports_by_date.items(), reverse=True):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
            date_str, _ = format_datetime(date_obj)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –¥–∞—Ç—É
            report_count = len(date_reports)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–∞—Ç—ã
            keyboard.append([InlineKeyboardButton(
                text=f"üìÖ {date_str} ({report_count} –æ—Ç—á–µ—Ç–æ–≤)",
                callback_data=f"filter_type_date_{object_id}_{date_str}_{report_type}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ–±—ä–µ–∫—Ç–∞",
            callback_data=f"select_report_type_{report_type}"
        )])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        object_info, object_name = await get_object_info(session, object_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {type_name.lower()} –æ—Ç—á–µ—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞ '{object_name}':",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data.startswith("filter_type_date_"))
@with_session
async def process_filter_type_date(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∏ –æ–±—ä–µ–∫—Ç—É"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞, –¥–∞—Ç—É –∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        _, _, object_id, date_str, report_type = callback.data.split("_")
        object_id = int(object_id)
        date = datetime.strptime(date_str, '%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        reports = await get_reports_by_object(session, object_id)
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ –∏ —Ç–∏–ø—É
        filtered_reports = [r for r in reports if r.date.date() == date.date() and r.type == report_type]
        
        if not await check_reports_exist(callback, filtered_reports, edit=True):
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö
        date_str, _ = format_datetime(date)
        reports_text = f"{type_name} –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∑–∞ {date_str}:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –æ—Ç—á–µ—Ç–µ
        for i, report in enumerate(filtered_reports, start=1):
            time_str = report.date.strftime("%H:%M")
            reports_text += f"{i}. {time_str} - {report.report_type or '–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã'}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF",
                    callback_data=f"client_export_pdf_{object_id}_{date_str}_{report_type}"
                )
            ],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã",
                callback_data=f"filter_type_object_{object_id}_{report_type}"
            )]
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        object_info, object_name = await get_object_info(session, object_id)
        
        await callback.message.edit_text(
            reports_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        await handle_error(callback, e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
@client_router.callback_query(F.data.startswith("view_report_"))
@error_handler
@with_session
async def process_view_report(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        report_id = int(callback.data.split("_")[-1])
        report = await get_report_with_relations(session, report_id)
        
        if not report:
            await callback.message.edit_text(
                "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_keyboard("back_to_reports")
            )
            return
            
        object_info, object_name = await get_object_info(session, report.object_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        date_str, time_str = format_datetime(report.date)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
        report_type = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report.type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = report.comments if report.comments else "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if report.status == "sent" else "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
        
        message_text = (
            f"üìä –û—Ç—á–µ—Ç #{report.id}\n\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
            f"üèó –û–±—ä–µ–∫—Ç: {object_name}\n"
            f"üìù –¢–∏–ø –æ—Ç—á–µ—Ç–∞: {report_type}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: {status}\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = get_back_keyboard("back_to_reports")
        
        await callback.message.edit_text(message_text, reply_markup=keyboard)
        
    except Exception as e:
        await handle_error(callback, e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤
@client_router.callback_query(F.data == "back_to_reports_list")
async def process_back_to_reports_list(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
    if "reports" in state_data:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤
        # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
        await callback.message.edit_text(
            "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
            reply_markup=get_report_filter_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
        await callback.message.edit_text(
            "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
            reply_markup=get_report_filter_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@client_router.callback_query(F.data == "filter_reset")
async def process_filter_reset(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await callback.answer("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    
    await callback.message.edit_text(
        "–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä:",
        reply_markup=get_report_filter_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
@client_router.callback_query(F.data == "back_to_filters")
async def process_back_to_filters(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    await callback.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await callback.message.edit_text(
        "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
        reply_markup=get_report_filter_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
@client_router.callback_query(F.data == "view_object_reports")
@error_handler
@with_session
async def process_view_object_reports(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = await get_client_by_user_id(session, callback.from_user.id)
        
        if not client or not client.objects:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        objects_list = []
        for obj in client.objects:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
            reports = await get_reports_by_object(session, obj.id)
            report_count = len(reports) if reports else 0
            
            objects_list.append({
                "id": obj.id,
                "name": f"üèóÔ∏è {obj.name} ({report_count} –æ—Ç—á–µ—Ç–æ–≤)"
            })
        
        keyboard = create_object_keyboard(objects_list, "back_to_filters")
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤:",
            reply_markup=keyboard
        )
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data.startswith("client_object_reports_"))
@error_handler
@with_session
async def process_client_object_reports(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
        object_id = int(callback.data.replace("client_object_reports_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        reports = await get_reports_by_object(session, object_id)
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
        reports_by_date = {}
        for report in reports:
            date_str = report.date.strftime('%Y-%m-%d')
            if date_str not in reports_by_date:
                reports_by_date[date_str] = []
            reports_by_date[date_str].append(report)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
        keyboard = []
        for date_str, date_reports in sorted(reports_by_date.items(), reverse=True):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
            date_str, _ = format_datetime(date_obj)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –¥–∞—Ç—É
            report_count = len(date_reports)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–∞—Ç—ã
            keyboard.append([InlineKeyboardButton(
                text=f"üìÖ {date_str} ({report_count} –æ—Ç—á–µ—Ç–æ–≤)",
                callback_data=f"client_date_object_reports_{date_str}_{object_id}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="view_object_reports"
        )])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        object_info, object_name = await get_object_info(session, object_id)
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞ '{object_name}':",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data.startswith("client_date_object_reports_"))
@error_handler
@with_session
async def process_client_date_object_reports(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
        _, date_str, object_id = callback.data.split("_", 2)
        date = datetime.strptime(date_str, '%Y-%m-%d')
        object_id = int(object_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        reports = await get_reports_by_object(session, object_id)
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
        filtered_reports = [r for r in reports if r.date.date() == date.date()]
        
        if not await check_reports_exist(callback, filtered_reports, edit=True):
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
        keyboard = create_report_type_keyboard(filtered_reports, object_id, date_str)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        object_info, object_name = await get_object_info(session, object_id)
        
        date_str, _ = format_datetime(date)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∑–∞ {date_str}:",
            reply_markup=keyboard
        )
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data.startswith("client_date_object_type_reports_"))
@error_handler
@with_session
async def process_client_date_object_type_reports(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É, ID –æ–±—ä–µ–∫—Ç–∞ –∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        # –§–æ—Ä–º–∞—Ç: client_date_object_type_reports_[date]_[object_id]_[type]
        parts = callback.data.split("_")
        date_str = parts[5]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        object_id = int(parts[6])  # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
        report_type = parts[7]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –≤ –æ–±—ä–µ–∫—Ç datetime
        try:
            date = datetime.strptime(date_str, '%d.%m.%Y')
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
            date = datetime.strptime(date_str, '%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        reports = await get_reports_by_object(session, object_id)
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ –∏ —Ç–∏–ø—É
        filtered_reports = [r for r in reports if r.date.date() == date.date() and r.type == report_type]
        
        if not await check_reports_exist(callback, filtered_reports, edit=True):
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        object_info, object_name = await get_object_info(session, object_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö
        date_str, _ = format_datetime(date)
        reports_text = f"{type_name} –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∑–∞ {date_str}:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –æ—Ç—á–µ—Ç–µ
        for i, report in enumerate(filtered_reports, start=1):
            time_str = report.date.strftime("%H:%M")
            reports_text += f"{i}. {time_str} - {report.report_type or '–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã'}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF",
                    callback_data=f"client_export_pdf_{object_id}_{date_str}_{report_type}"
                )
            ],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞",
                callback_data=f"client_date_object_reports_{date_str}_{object_id}"
            )]
        ]
        
        await callback.message.edit_text(
            reports_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        await handle_error(callback, e)

@client_router.callback_query(F.data.startswith("client_export_pdf_"))
@error_handler
@with_session
async def process_client_export_pdf(callback: CallbackQuery, session: AsyncSession, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤ PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞, –¥–∞—Ç—É –∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        parts = callback.data.split("_")
        object_id = int(parts[3])
        date_str = parts[4]
        report_type = parts[5]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –≤ –æ–±—ä–µ–∫—Ç datetime
        try:
            date = datetime.strptime(date_str, '%d.%m.%Y')
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
            date = datetime.strptime(date_str, '%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        reports = await get_reports_by_object(session, object_id)
        
        if not await check_reports_exist(callback, reports, edit=True):
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ –∏ —Ç–∏–ø—É
        filtered_reports = [r for r in reports if r.date.date() == date.date() and r.type == report_type]
        
        if not await check_reports_exist(callback, filtered_reports, edit=True):
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—É
        client = await get_client_by_user_id(session, user.id)
        if not client or object_id not in [obj.id for obj in client.objects]:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—É.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        object_info, object_name = await get_object_info(session, object_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        reports_with_relations = []
        for report in filtered_reports:
            report_with_relations = await get_report_with_relations(session, report.id)
            if report_with_relations:
                reports_with_relations.append(report_with_relations)
        
        if not reports_with_relations:
            await callback.message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–æ–≤.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        export_dir = os.path.join(settings.BASE_DIR, settings.EXPORT_DIR)
        os.makedirs(export_dir, exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"report_{object_id}_{date.strftime('%Y%m%d')}_{report_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(export_dir, filename)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –≤ PDF –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        from construction_report_bot.utils.export_utils import export_report_to_pdf
        try:
            export_report_to_pdf(reports_with_relations, filepath)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}", exc_info=True)
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
        from aiogram.types import FSInputFile
        document = FSInputFile(filepath)
        try:
            date_str, _ = format_datetime(date)
            await callback.message.answer_document(
                document=document,
                caption=f"üìÑ {type_name} –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∑–∞ {date_str} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ PDF"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", exc_info=True)
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞",
                reply_markup=get_back_keyboard()
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(filepath)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤
        date_str, _ = format_datetime(date)
        await callback.message.edit_text(
            f"{type_name} –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∑–∞ {date_str}:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞", callback_data=f"client_date_object_reports_{date_str}_{object_id}")
            ]])
        )
        
    except Exception as e:
        await handle_error(callback, e)

def register_client_handlers(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞.
    
    Args:
        dp: –û–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    dp.include_router(client_router) 
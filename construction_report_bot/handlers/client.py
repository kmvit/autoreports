"""–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤, –∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
—Å —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
"""

from aiogram import Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, List
from datetime import datetime

from construction_report_bot.middlewares.role_check import client_required
from construction_report_bot.database.crud import (
    get_report_by_id, get_reports_by_object, get_today_reports,
    get_client_by_user_id
)
from construction_report_bot.database.session import get_session
from construction_report_bot.config.keyboards import get_report_filter_keyboard, get_back_keyboard
from construction_report_bot.config.settings import settings

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
client_router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
client_router.message.middleware(client_required())
client_router.callback_query.middleware(client_required())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
class ReportFilterStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.
    
    Attributes:
        waiting_for_date: –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
        waiting_for_object: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
        waiting_for_report_type: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    """
    waiting_for_date = State()
    waiting_for_object = State()
    waiting_for_report_type = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
@client_router.message(F.text == "üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤")
async def cmd_report_history(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    await message.answer(
        "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
        reply_markup=get_report_filter_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
@client_router.message(F.text == "üìë –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
async def cmd_today_report(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    session_gen = get_session()
    session = await session_gen.__anext__()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = message.bot.get("user")
        client = await get_client_by_user_id(session, user.id)
        
        if not client:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
        objects = client.objects
        
        if not objects:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞)
        object_id = objects[0].id
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        reports = await get_today_reports(session, object_id)
        
        if reports:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–∞–º–∏
            report_text = f"üìë –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')}):\n\n"
            
            for report in reports:
                report_text += f"–¢–∏–ø: {'–£—Ç—Ä–µ–Ω–Ω–∏–π' if report.type == 'morning' else '–í–µ—á–µ—Ä–Ω–∏–π'}\n"
                report_text += f"–û–±—ä–µ–∫—Ç: {report.object.name}\n"
                report_text += f"–¢–∏–ø —Ä–∞–±–æ—Ç: {report.report_type}\n"
                
                if report.work_subtype:
                    report_text += f"–ü–æ–¥—Ç–∏–ø —Ä–∞–±–æ—Ç: {report.work_subtype}\n"
                
                report_text += f"–°—Ç–∞—Ç—É—Å: {'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' if report.status == 'sent' else '–ß–µ—Ä–Ω–æ–≤–∏–∫'}\n"
                
                if report.comments:
                    report_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {report.comments}\n"
                
                report_text += "\n"
            
            await message.answer(report_text)
        else:
            await message.answer(
                f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')}) "
                f"–æ—Ç—á–µ—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –æ–±—ä–µ–∫—Ç–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            )
    finally:
        await session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
@client_router.callback_query(F.data == "filter_date")
async def process_filter_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    
    await state.set_state(ReportFilterStates.waiting_for_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
@client_router.message(ReportFilterStates.waiting_for_date)
async def process_date_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    date_str = message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        filter_date = datetime.strptime(date_str, '%d.%m.%Y')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(filter_date=filter_date)
        
        # TODO: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ
        await message.answer(
            f"–û—Ç—á–µ—Ç—ã –∑–∞ {date_str}:\n\n"
            f"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É
@client_router.callback_query(F.data == "filter_object")
async def process_filter_object(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç—É"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    session_gen = get_session()
    session = await session_gen.__anext__()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        user = callback.bot.get("user")
        client = await get_client_by_user_id(session, user.id)
        
        if not client or not client.objects:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        objects_text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:\n\n"
        for i, obj in enumerate(client.objects, start=1):
            objects_text += f"{i}. {obj.name}\n"
        
        await callback.message.edit_text(objects_text)
        await state.set_state(ReportFilterStates.waiting_for_object)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(objects={i: obj.id for i, obj in enumerate(client.objects, start=1)})
    finally:
        await session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
@client_router.message(ReportFilterStates.waiting_for_object)
async def process_object_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        object_num = int(message.text.strip())
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        objects = state_data.get("objects", {})
        
        if object_num in objects:
            object_id = objects[object_num]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            session_gen = get_session()
            session = await session_gen.__anext__()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç—É
                reports = await get_reports_by_object(session, object_id)
                
                if reports:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç—á–µ—Ç–∞–º–∏
                    reports_text = f"–û—Ç—á–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É:\n\n"
                    
                    for report in reports:
                        reports_text += f"–î–∞—Ç–∞: {report.date.strftime('%d.%m.%Y')}\n"
                        reports_text += f"–¢–∏–ø: {'–£—Ç—Ä–µ–Ω–Ω–∏–π' if report.type == 'morning' else '–í–µ—á–µ—Ä–Ω–∏–π'}\n"
                        reports_text += f"–¢–∏–ø —Ä–∞–±–æ—Ç: {report.report_type}\n"
                        
                        if report.work_subtype:
                            reports_text += f"–ü–æ–¥—Ç–∏–ø —Ä–∞–±–æ—Ç: {report.work_subtype}\n"
                        
                        reports_text += f"–°—Ç–∞—Ç—É—Å: {'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' if report.status == 'sent' else '–ß–µ—Ä–Ω–æ–≤–∏–∫'}\n\n"
                    
                    await message.answer(reports_text)
                else:
                    await message.answer("–ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            finally:
                await session.close()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –æ—Ç—á–µ—Ç–∞
@client_router.callback_query(F.data == "filter_report_type")
async def process_filter_report_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:\n\n"
        "1. –£—Ç—Ä–µ–Ω–Ω–∏–π\n"
        "2. –í–µ—á–µ—Ä–Ω–∏–π"
    )
    
    await state.set_state(ReportFilterStates.waiting_for_report_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
@client_router.message(ReportFilterStates.waiting_for_report_type)
async def process_report_type_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    report_type = message.text.strip()
    
    if report_type == "1":
        report_type = "morning"
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π"
    elif report_type == "2":
        report_type = "evening"
        type_name = "–í–µ—á–µ—Ä–Ω–∏–π"
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ 1 (–£—Ç—Ä–µ–Ω–Ω–∏–π) –∏–ª–∏ 2 (–í–µ—á–µ—Ä–Ω–∏–π).")
        return
    
    # TODO: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É
    await message.answer(
        f"–û—Ç—á–µ—Ç—ã —Ç–∏–ø–∞ {type_name}:\n\n"
        f"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@client_router.callback_query(F.data == "filter_reset")
async def process_filter_reset(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await callback.answer("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    
    await callback.message.edit_text(
        "–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä:",
        reply_markup=get_report_filter_keyboard()
    )

def register_client_handlers(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞.
    
    Args:
        dp: –û–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    dp.include_router(client_router) 
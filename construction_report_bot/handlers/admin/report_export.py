import logging
import os
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from construction_report_bot.database.crud import (
    get_report_by_id,
    get_report_with_relations,
    get_all_reports,
    get_object_by_id,
    get_reports_by_object_date_type
)
from construction_report_bot.database.models import Report, ReportPhoto
from construction_report_bot.config.settings import settings
from construction_report_bot.config.keyboards import (
    get_admin_report_menu_keyboard
)
from construction_report_bot.utils.decorators import error_handler, with_session
from construction_report_bot.middlewares.role_check import admin_required
from construction_report_bot.utils.logging.logger import log_admin_action, log_error
from construction_report_bot.utils.export_utils import export_report_to_pdf, export_report_to_excel

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤
admin_report_export_router = Router()
# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
admin_report_export_router.message.middleware(admin_required())
admin_report_export_router.callback_query.middleware(admin_required())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤
@admin_report_export_router.callback_query(F.data == "export_report")
@error_handler
@with_session
async def process_export_reports_menu(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã
        reports = await get_all_reports(session)
        
        if not reports:
            await callback.message.edit_text(
                "–û—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç—á–µ—Ç–∞–º–∏
        keyboard = []
        for report in reports:
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "‚úÖ" if report.status == "completed" else "üìù"
            button_text = f"{status_emoji} {report.type} –æ—Ç {report.date.strftime('%d.%m.%Y %H:%M')}"
            callback_data = f"export_report_{report.id}"
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_report_menu")])
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤",
            reply_markup=await get_admin_report_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞
@admin_report_export_router.callback_query(F.data.startswith("export_report_"))
@error_handler
@with_session
async def process_export_report(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
    report_id = int(callback.data.split("_")[2])
    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ #{report_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∏–∑ –ë–î
        report = await get_report_with_relations(session, report_id)
        if not report:
            logging.warning(f"[process_export_report] –û—Ç—á–µ—Ç #{report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await callback.message.edit_text(
                "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç—á–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(report_id=report_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton(text="üìä Excel", callback_data=f"export_excel_{report_id}")],
            [InlineKeyboardButton(text="üìÑ PDF", callback_data=f"export_pdf_{report_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="export_report")]
        ]
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞",
            reply_markup=await get_admin_report_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
@admin_report_export_router.callback_query(F.data.startswith("export_excel_"))
@error_handler
@with_session
async def process_export_excel(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ Excel"""
    # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
    report_id = int(callback.data.split("_")[2])
    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ #{report_id} –≤ Excel")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∏–∑ –ë–î
        report = await get_report_with_relations(session, report_id)
        if not report:
            logging.warning(f"[process_export_excel] –û—Ç—á–µ—Ç #{report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await callback.message.edit_text(
                "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        export_dir = os.path.join(settings.BASE_DIR, settings.EXPORT_DIR)
        os.makedirs(export_dir, exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"report_{report_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        filepath = os.path.join(export_dir, filename)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ Excel
        export_report_to_excel([report], filepath)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
        document = FSInputFile(filepath)
        await callback.message.answer_document(
            document=document,
            caption=f"üìä –û—Ç—á–µ—Ç #{report_id} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Excel"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await get_admin_report_menu_keyboard()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞ –≤ Excel: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞ –≤ Excel",
            reply_markup=await get_admin_report_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
@admin_report_export_router.callback_query(F.data.startswith("export_pdf_"))
@error_handler
@with_session
async def process_export_pdf(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ PDF"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data
        parts = callback.data.split("_")
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã —á–∞—Å—Ç–∏ callback_data: {parts}")
        
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç export_pdf_objectId_dateStr_reportType
        if len(parts) >= 5:
            # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞, –¥–∞—Ç—É –∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
            object_id = int(parts[2])
            date_str = parts[3]
            report_type = parts[4]
            
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id}, –¥–∞—Ç–∞: {date_str}, —Ç–∏–ø: {report_type}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
            try:
                date = datetime.strptime(date_str, '%Y%m%d')
                logging.info(f"–î–∞—Ç–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {date}")
            except ValueError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {str(e)}")
                await callback.message.edit_text(
                    "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã.",
                    reply_markup=await get_admin_report_menu_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
            object_info = await get_object_by_id(session, object_id)
            if not object_info:
                logging.warning(f"[process_export_pdf] –û–±—ä–µ–∫—Ç #{object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await callback.message.edit_text(
                    "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=await get_admin_report_menu_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ —Ç–∏–ø
            reports = await get_reports_by_object_date_type(session, object_id, date, report_type)
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(reports) if reports else 0}")
            
            if not reports:
                logging.warning(f"[process_export_pdf] –û—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id} –∑–∞ {date.strftime('%d.%m.%Y')} —Ç–∏–ø–∞ {report_type} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                await callback.message.edit_text(
                    f"–û—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}' –∑–∞ {date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=await get_admin_report_menu_keyboard()
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
            type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            export_dir = os.path.join(settings.BASE_DIR, settings.EXPORT_DIR)
            os.makedirs(export_dir, exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"{object_info.name}_{date.strftime('%Y%m%d')}_{report_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            filepath = os.path.join(export_dir, filename)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –≤ PDF
            export_report_to_pdf(reports, filepath)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
            document = FSInputFile(filepath)
            await callback.message.answer_document(
                document=document,
                caption=f"üìÑ {type_name} –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}' –∑–∞ {date.strftime('%d.%m.%Y')} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ PDF"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç export_pdf_reportId (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
        else:
            # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
            report_id = int(callback.data.split("_")[2])
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ #{report_id} –≤ PDF")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∏–∑ –ë–î
            report = await get_report_with_relations(session, report_id)
            if not report:
                logging.warning(f"[process_export_pdf] –û—Ç—á–µ—Ç #{report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await callback.message.edit_text(
                    "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=await get_admin_report_menu_keyboard()
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            export_dir = os.path.join(settings.BASE_DIR, settings.EXPORT_DIR)
            os.makedirs(export_dir, exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"report_{report_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            filepath = os.path.join(export_dir, filename)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ PDF
            export_report_to_pdf([report], filepath)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
            document = FSInputFile(filepath)
            await callback.message.answer_document(
                document=document,
                caption=f"üìÑ –û—Ç—á–µ—Ç #{report_id} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PDF"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=await get_admin_report_menu_keyboard()
            )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞ –≤ PDF: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞ –≤ PDF",
            reply_markup=await get_admin_report_menu_keyboard()
        ) 
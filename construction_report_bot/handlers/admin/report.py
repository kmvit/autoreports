import logging
from aiogram import Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
import os
import uuid
from datetime import datetime
from typing import Optional
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from aiogram.types import BufferedInputFile

from construction_report_bot.database.crud import (
    get_user_by_telegram_id,
    get_object_by_id,
    get_all_objects,
    create_report,
    get_all_itr,
    get_all_workers,
    get_all_equipment,
    get_all_reports,
    create_base_report,
    get_itr_by_id,
    get_worker_by_id,
    get_equipment_by_id,
    get_report_by_id,
    get_report_with_relations,
    get_reports_by_status,
    get_all_clients,
    get_user_by_id,
    get_reports_for_export
)
from construction_report_bot.database.session import get_session, async_session
from construction_report_bot.database.models import (
    Report, Client, Object, ReportPhoto, ITR, Worker, Equipment,
    report_itr, report_workers, report_equipment, User
)
from construction_report_bot.config.settings import settings
from construction_report_bot.states.report_states import ReportStates
from construction_report_bot.services.report_service import ReportService
from construction_report_bot.config.keyboards import (
    get_admin_report_menu_keyboard,
    get_main_menu_keyboard,
    get_objects_keyboard,
    get_report_type_keyboard,
    get_work_subtype_keyboard,
    get_report_actions_keyboard,
    get_itr_keyboard,
    get_workers_keyboard,
    get_equipment_keyboard,
    get_photos_keyboard,
    get_comments_keyboard,
    get_back_keyboard,
    get_report_filter_keyboard,
    get_work_type_keyboard
)
from construction_report_bot.utils.exceptions import ValidationError, DatabaseError
from construction_report_bot.utils.logging.logger import log_admin_action, log_error
from construction_report_bot.utils.decorators import error_handler, with_session
from construction_report_bot.middlewares.role_check import AdminMiddleware, admin_required
from construction_report_bot.utils.report_utils import (
    validate_date_range,
    get_reports_by_date_range,
    generate_report_summary,
    format_report_message
)
from construction_report_bot.utils.export_utils import export_report_to_pdf, export_report_to_excel

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_report_router = Router()
# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
admin_report_router.message.middleware(admin_required())
admin_report_router.callback_query.middleware(admin_required())

class ReportManagementStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏"""
    waiting_for_type = State()
    waiting_for_filter = State()
    waiting_for_date_range = State()


async def validate_report_data(data: dict) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞"""
    logging.info(f"–ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞. –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    
    required_fields = ['object_id', 'report_type', 'itr_list', 'workers_list', 'equipment_list']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
    for field in required_fields:
        if field not in data:
            error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"
            logging.error(error_msg)
            raise ValidationError(error_msg)
        logging.info(f"–ü–æ–ª–µ {field} –Ω–∞–π–¥–µ–Ω–æ. –ó–Ω–∞—á–µ–Ω–∏–µ: {data[field]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
    if data['report_type'] not in ['engineering', 'internal_networks', 'landscaping', 'general_construction']:
        error_msg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞"
        logging.error(error_msg)
        raise ValidationError(error_msg)
    
    if data['type'] not in ['morning', 'evening']:
        error_msg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫"
        logging.error(error_msg)
        raise ValidationError(error_msg)
    
    logging.info("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_report_router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞–º–∏")
async def show_admin_report_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    print("[show_admin_report_menu] Showing admin report menu")
    keyboard = await get_admin_report_menu_keyboard()
    print(f"[show_admin_report_menu] Created keyboard: {keyboard}")
    await message.answer(
        "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=keyboard
    )

@admin_report_router.callback_query(F.data == "my_reports")
async def process_my_reports(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        async for session in get_session():
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reports = await get_all_reports(session, callback.from_user.id)
            
            if reports:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç—á–µ—Ç–∞–º–∏
                keyboard = []
                for report in reports:
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                    status_emoji = "‚úÖ" if report.status == "completed" else "üìù"
                    button_text = f"{status_emoji} {report.type} –æ—Ç {report.date.strftime('%d.%m.%Y %H:%M')}"
                    callback_data = f"edit_report_{report.id}"
                    logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {button_text} —Å callback_data: {callback_data}")
                    keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_report_menu")])
                
                await callback.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
            else:
                await callback.message.edit_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_report_menu")]
                    ])
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}",
            reply_markup=await get_admin_report_menu_keyboard()
        )

@admin_report_router.callback_query(F.data.startswith("edit_report_"))
async def process_edit_report(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        report_id = int(callback.data.split("_")[2])
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ #{report_id}")
        logging.info(f"Callback data: {callback.data}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        async for session in get_session():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∏–∑ –ë–î
                report = await get_report_by_id(session, report_id)
                if not report:
                    logging.warning(f"[process_edit_report] –û—Ç—á–µ—Ç #{report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    await callback.message.edit_text(
                        "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        reply_markup=await get_admin_report_menu_keyboard()
                    )
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                object_query = select(Object).where(Object.id == report.object_id)
                result = await session.execute(object_query)
                object = result.scalar_one_or_none()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                state_data = {
                    'report_id': report_id,
                    'object_id': report.object_id,
                    'report_type': report.report_type,
                    'type': report.type,
                    'work_type': report.report_type,
                    'work_subtype': report.work_subtype,
                    'comments': report.comments
                }
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                photos_query = select(ReportPhoto).where(ReportPhoto.report_id == report_id)
                result = await session.execute(photos_query)
                photos = result.scalars().all()
                
                # –ü–æ–ª—É—á–∞–µ–º –ò–¢–†
                itr_query = (
                    select(ITR)
                    .join(report_itr, ITR.id == report_itr.c.itr_id)
                    .where(report_itr.c.report_id == report_id)
                )
                result = await session.execute(itr_query)
                itr_personnel = result.scalars().all()
                state_data['itr_list'] = [itr.id for itr in itr_personnel]
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏—Ö
                workers_query = (
                    select(Worker)
                    .join(report_workers, Worker.id == report_workers.c.worker_id)
                    .where(report_workers.c.report_id == report_id)
                )
                result = await session.execute(workers_query)
                workers = result.scalars().all()
                state_data['workers_list'] = [worker.id for worker in workers]
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É
                equipment_query = (
                    select(Equipment)
                    .join(report_equipment, Equipment.id == report_equipment.c.equipment_id)
                    .where(report_equipment.c.report_id == report_id)
                )
                result = await session.execute(equipment_query)
                equipment = result.scalars().all()
                state_data['equipment_list'] = [eq.id for eq in equipment]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(**state_data)
                logging.info(f"[process_edit_report] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {state_data}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ
                report_info = (
                    f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ #{report.id}\n\n"
                    f"–¢–∏–ø: {report.type}\n"
                    f"–î–∞—Ç–∞: {report.date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–°—Ç–∞—Ç—É—Å: {report.status}\n"
                    f"–û–±—ä–µ–∫—Ç: {object.name if object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ä–∞–±–æ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
                if report.report_type:
                    report_info += f"–¢–∏–ø —Ä–∞–±–æ—Ç: {report.report_type}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–∏–ø —Ä–∞–±–æ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
                if report.work_subtype:
                    report_info += f"–ü–æ–¥—Ç–∏–ø —Ä–∞–±–æ—Ç: {report.work_subtype}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ò–¢–†, –µ—Å–ª–∏ –µ—Å—Ç—å
                if itr_personnel:
                    itr_names = [itr.full_name for itr in itr_personnel]
                    if itr_names:
                        report_info += f"–ò–¢–†: {', '.join(itr_names)}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
                if workers:
                    worker_names = [worker.full_name for worker in workers]
                    if worker_names:
                        report_info += f"–†–∞–±–æ—á–∏–µ: {', '.join(worker_names)}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
                if equipment:
                    equipment_names = [eq.name for eq in equipment]
                    if equipment_names:
                        report_info += f"–¢–µ—Ö–Ω–∏–∫–∞: {', '.join(equipment_names)}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                if report.comments:
                    report_info += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report.comments}\n"

                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                if photos:
                    photo_count = len(photos)
                    report_info += f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_count}\n"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await callback.message.edit_text(
                    report_info + "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=await get_report_actions_keyboard()
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await state.set_state(ReportStates.edit_report)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞",
                    reply_markup=await get_admin_report_menu_keyboard()
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_edit_report: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=await get_admin_report_menu_keyboard()
        )

@admin_report_router.message(Command("reports"))
@error_handler
async def cmd_reports(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reports"""
    await state.set_state(ReportManagementStates.waiting_for_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_report_type_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
@admin_report_router.callback_query(F.data == "create_report")
async def create_report_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
    try:
        await callback.answer()
        session = await get_session().__anext__()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_admin_action("report_creation_attempt", callback.from_user.id, "–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
        
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        objects = await get_all_objects(session)
        if not objects:
            log_admin_action("report_creation_failed", callback.from_user.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
            await callback.message.edit_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞.",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
            
        log_admin_action("report_creation_started", callback.from_user.id)
        keyboard = await get_objects_keyboard(session)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
            reply_markup=keyboard
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(ReportStates.select_object)
    except Exception as e:
        log_error(e, callback.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
@admin_report_router.callback_query(F.data.startswith("object_"), ReportStates.select_object)
async def process_object_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞"""
    try:
        await callback.answer()
        session = await get_session().__anext__()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
        object_id = int(callback.data.split("_")[1])
        logging.info(f"[process_object_selection] –ü–æ–ª—É—á–µ–Ω object_id –∏–∑ callback_data: {object_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(object_id=object_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state_data = await state.get_data()
        logging.info(f"[process_object_selection] –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {state_data}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ä–∞–±–æ—Ç
        keyboard = get_work_type_keyboard()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç:",
            reply_markup=keyboard
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(ReportStates.select_work_type)
    except ValueError as e:
        logging.error(f"[process_object_selection] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –æ–±—ä–µ–∫—Ç–∞: {e}")
        await callback.message.edit_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—ä–µ–∫—Ç–∞.")
    except Exception as e:
        logging.error(f"[process_object_selection] –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç
@admin_report_router.callback_query(F.data.startswith("work_"), ReportStates.select_work_type)
async def process_work_type_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç
    work_type = callback.data.replace("work_", "")
    await state.update_data(work_type=work_type)
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", —Ç–æ –ø–æ–¥—Ç–∏–ø–∞ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
    if work_type == "landscaping":
        await state.update_data(work_subtype=None)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤
        keyboard = get_report_type_keyboard()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=keyboard
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(ReportStates.select_report_type)
    else:
        # –í –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–∏–ø—ã —Ä–∞–±–æ—Ç
        keyboard = await get_work_subtype_keyboard(f"report_{work_type}")
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø —Ä–∞–±–æ—Ç:", reply_markup=keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(ReportStates.select_work_subtype)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–∏–ø–∞ —Ä–∞–±–æ—Ç
@admin_report_router.callback_query(F.data.startswith("subtype_"), ReportStates.select_work_subtype)
async def process_work_subtype_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–∏–ø–∞ —Ä–∞–±–æ—Ç"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–¥—Ç–∏–ø —Ä–∞–±–æ—Ç
    work_subtype = callback.data.replace("subtype_", "")
    await state.update_data(work_subtype=work_subtype)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤
    keyboard = get_report_type_keyboard()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=keyboard
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ReportStates.select_report_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–¢–†
@admin_report_router.callback_query(F.data == "add_itr")
async def process_add_itr(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–¢–†"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    session_gen = get_session()
    session = await session_gen.__anext__()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ò–¢–†
        itr_list = await get_all_itr(session)
        
        if not itr_list:
            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ –ò–¢–† –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ò–¢–† –≤ —Å–∏—Å—Ç–µ–º—É.",
                reply_markup=await get_report_actions_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ò–¢–†
        keyboard = await get_itr_keyboard(itr_list, selected_ids=[])
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ò–¢–† –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
            reply_markup=keyboard
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(ReportStates.add_itr)
    except Exception as e:
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ò–¢–†
@admin_report_router.callback_query(F.data.startswith("itr_"), ReportStates.add_itr)
async def process_itr_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ò–¢–†"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ò–¢–† –∏–∑ callback_data
        itr_id = int(callback.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        report_id = data.get('report_id')
        
        if not report_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –æ—Ç—á–µ—Ç–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –ò–¢–†
            itr = await get_itr_by_id(session, itr_id)
            
            if not itr:
                await callback.answer("–ò–¢–† –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ò–¢–† –≤ –æ—Ç—á–µ—Ç
            report = await ReportService.add_itr_to_report(session, report_id, [itr_id])
            
            if not report:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ò–¢–† –≤ –æ—Ç—á–µ—Ç", show_alert=True)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback
            await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω –ò–¢–†: {itr.full_name}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
            await callback.message.edit_text(
                f"‚úÖ –ò–¢–† {itr.full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—á–µ—Ç.\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:",
                reply_markup=await get_report_actions_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ò–¢–†: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ò–¢–†", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö
@admin_report_router.callback_query(F.data == "add_workers")
async def process_add_workers(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    session_gen = get_session()
    session = await session_gen.__anext__()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        report_id = data.get('report_id')
        
        if not report_id:
            await callback.message.edit_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID –æ—Ç—á–µ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=await get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–∞–±–æ—á–∏–º–∏
        report = await get_report_with_relations(session, report_id)
        if not report:
            await callback.message.edit_text(
                "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=await get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö
        all_workers = await get_all_workers(session)
        
        if not all_workers:
            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—á–∏—Ö –≤ —Å–∏—Å—Ç–µ–º—É.",
                reply_markup=await get_report_actions_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ä–∞–±–æ—á–∏—Ö, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç—á–µ—Ç
        existing_worker_ids = [worker.id for worker in report.workers] if report.workers else []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö, –∏—Å–∫–ª—é—á–∞—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—á–µ—Ç
        available_workers = [worker for worker in all_workers if worker.id not in existing_worker_ids]
        
        if not available_workers:
            await callback.message.edit_text(
                "‚ùå –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç—á–µ—Ç.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=await get_report_actions_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏
        keyboard = await get_workers_keyboard(available_workers)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö —É–∂–µ –≤ –æ—Ç—á–µ—Ç–µ
        existing_count = len(existing_worker_ids)
        message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞:\n\n"
        if existing_count > 0:
            message_text += f"‚ÑπÔ∏è –í –æ—Ç—á–µ—Ç–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö: {existing_count}\n\n"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(ReportStates.add_workers)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–∏—Ö: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–∏—Ö.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=await get_report_actions_keyboard()
        )
    finally:
        await session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö
@admin_report_router.callback_query(F.data.startswith("worker_"), ReportStates.add_workers)
async def process_worker_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–∞–±–æ—á–µ–≥–æ –∏–∑ callback_data
    worker_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    workers_list = data.get('workers_list', [])
    report_id = data.get('report_id')
    
    if not report_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –æ—Ç—á–µ—Ç–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    session_gen = get_session()
    session = await session_gen.__anext__()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–∞–±–æ—á–∏–º–∏
        report = await get_report_with_relations(session, report_id)
        if not report:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ä–∞–±–æ—á–∏—Ö, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç—á–µ—Ç
        existing_worker_ids = [worker.id for worker in report.workers] if report.workers else []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–∞–±–æ—á–∏–π –≤ –æ—Ç—á–µ—Ç
        if worker_id in existing_worker_ids:
            await callback.answer("‚ùå –≠—Ç–æ—Ç —Ä–∞–±–æ—á–∏–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—á–µ—Ç", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –≤—ã–±–æ—Ä–µ
        was_selected = worker_id in workers_list
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Ä–∞–±–æ—á–µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
        if was_selected:
            workers_list.remove(worker_id)
        else:
            workers_list.append(worker_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(workers_list=workers_list)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö
        all_workers = await get_all_workers(session)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö, –∏—Å–∫–ª—é—á–∞—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—á–µ—Ç
        available_workers = [worker for worker in all_workers if worker.id not in existing_worker_ids]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏
        keyboard = await get_workers_keyboard(available_workers, selected_ids=workers_list)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer(f"{'–£–¥–∞–ª–µ–Ω' if was_selected else '–î–æ–±–∞–≤–ª–µ–Ω'} —Ä–∞–±–æ—á–∏–π")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö —É–∂–µ –≤ –æ—Ç—á–µ—Ç–µ
        existing_count = len(existing_worker_ids)
        message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞:\n\n"
        if existing_count > 0:
            message_text += f"‚ÑπÔ∏è –í –æ—Ç—á–µ—Ç–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö: {existing_count}\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–±–æ—á–µ–≥–æ: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–±–æ—á–µ–≥–æ", show_alert=True)
    finally:
        await session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö
@admin_report_router.callback_query(F.data == "workers_done", ReportStates.add_workers)
async def process_workers_done(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        workers_list = data.get('workers_list', [])
        report_id = data.get('report_id')
        
        if not report_id:
            await callback.message.edit_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID –æ—Ç—á–µ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=await get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ä–∞–±–æ—á–∏—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–∞–±–æ—á–∏–º–∏
            report = await get_report_with_relations(session, report_id)
            if not report:
                await callback.message.edit_text(
                    "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=await get_main_menu_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ä–∞–±–æ—á–∏—Ö, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç—á–µ—Ç
            existing_worker_ids = [worker.id for worker in report.workers] if report.workers else []
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ ID —Ä–∞–±–æ—á–∏—Ö, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã
            all_worker_ids = list(set(existing_worker_ids + workers_list))
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö
            selected_workers = []
            for worker_id in all_worker_ids:
                worker = await session.get(Worker, worker_id)
                if worker:
                    selected_workers.append(worker)
            
            if not selected_workers:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=await get_workers_keyboard()
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º —Ä–∞–±–æ—á–∏—Ö
            report = await create_report(
                session=session,
                report_id=report_id,
                workers_list=all_worker_ids
            )
            
            if not report:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=await get_main_menu_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            workers_info = [f"‚Ä¢ {worker.full_name} ({worker.position})" for worker in selected_workers]
            
            if workers_info:
                names_text = ", ".join(workers_info)
                await callback.message.edit_text(
                    f"‚úÖ –†–∞–±–æ—á–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç—á–µ—Ç:\n{names_text}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=await get_report_actions_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "‚úÖ –†–∞–±–æ—á–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç—á–µ—Ç.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=await get_report_actions_keyboard()
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(workers_list=all_worker_ids)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—á–∏—Ö: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—á–∏—Ö.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=await get_main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏
@admin_report_router.callback_query(F.data == "add_equipment")
async def process_add_equipment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    session_gen = get_session()
    session = await session_gen.__anext__()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏
        equipment_list = await get_all_equipment(session)
        
        if not equipment_list:
            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –≤ —Å–∏—Å—Ç–µ–º—É.",
                reply_markup=await get_report_actions_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ—Ö–Ω–∏–∫–æ–π
        keyboard = await get_equipment_keyboard(equipment_list)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
            reply_markup=keyboard
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(ReportStates.add_equipment)
    except Exception as e:
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–∏–∫–∏
@admin_report_router.callback_query(F.data.startswith("equipment_"), ReportStates.add_equipment)
async def process_equipment_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–∏–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback'–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if callback.data == "equipment_done":
        await process_equipment_done(callback, state)
        return
        
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ callback_data
    equipment_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    equipment_list = data.get('equipment_list', [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    was_selected = equipment_id in equipment_list
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
    if was_selected:
        equipment_list.remove(equipment_id)
    else:
        equipment_list.append(equipment_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(equipment_list=equipment_list)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    session_gen = get_session()
    session = await session_gen.__anext__()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏
        all_equipment = await get_all_equipment(session)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—á–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π
        keyboard = await get_equipment_keyboard(all_equipment, selected_ids=equipment_list)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await callback.answer(f"{'–£–¥–∞–ª–µ–Ω–∞' if was_selected else '–î–æ–±–∞–≤–ª–µ–Ω–∞'} —Ç–µ—Ö–Ω–∏–∫–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–∏–∫–∏
@admin_report_router.callback_query(F.data == "equipment_done", ReportStates.add_equipment)
async def process_equipment_done(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–∏–∫–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    report_id = data.get('report_id')
    equipment_list = data.get('equipment_list', [])
    
    if not report_id:
        logging.error("report_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=await get_admin_report_menu_keyboard()
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    session = async_session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = await get_report_by_id(session, report_id)
        if not report:
            logging.error(f"–û—Ç—á–µ—Ç —Å ID {report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.message.edit_text(
                "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            await state.clear()
            return
        
        if not equipment_list:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ–π —Ç–µ—Ö–Ω–∏–∫–∏
            all_equipment = await get_all_equipment(session)
            await callback.message.edit_text(
                "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
                reply_markup=await get_equipment_keyboard(all_equipment)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∏—Ö –∏–º–µ–Ω–∞
        equipment_names = []
        for eq_id in equipment_list:
            equipment = await get_equipment_by_id(session, eq_id)
            if equipment:
                equipment_names.append(equipment.name)
        
        if not equipment_names:
            await callback.message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=await get_report_actions_keyboard()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å –Ω–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π
        updated_report = await ReportService.create_or_update_report(
            session=session,
            object_id=report.object_id,
            report_type=report.report_type,
            equipment_list=equipment_list,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ ID
            report_id=report_id
        )
        
        if not updated_report:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç {report_id}")
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=await get_report_actions_keyboard()
            )
            return
        
        success_message = (
            f"‚úÖ –¢–µ—Ö–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—á–µ—Ç:\n\n"
            f"{chr(10).join(f'‚Ä¢ {name}' for name in equipment_names)}"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –æ—Ç—á–µ—Ç–æ–º
        await state.clear()
        await callback.message.edit_text(
            success_message,
            reply_markup=await get_report_actions_keyboard()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –≤ –æ—Ç—á–µ—Ç: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=await get_report_actions_keyboard()
        )
    finally:
        await session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º
@admin_report_router.callback_query(F.data == "back_to_actions")
async def process_back_to_actions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º"""
    await callback.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=await get_report_actions_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
@admin_report_router.callback_query(F.data == "save_report")
async def process_save_report(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    logging.info(f"[process_save_report] –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: {data}")
    
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
        logging.info("[process_save_report] –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö")
        await validate_report_data(data)
        logging.info("[process_save_report] –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        session_gen = get_session()
        session = await session_gen.__anext__()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            logging.info("[process_save_report] –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –≤ –ë–î")
            report = await create_report(session, data)
            logging.info(f"[process_save_report] –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {report.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            object_query = select(Object).where(Object.id == report.object_id)
            result = await session.execute(object_query)
            object = result.scalar_one_or_none()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞
            await callback.message.edit_text(
                f"‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"ID –æ—Ç—á–µ—Ç–∞: {report.id}\n"
                f"–û–±—ä–µ–∫—Ç: {object.name if object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"–¢–∏–ø —Ä–∞–±–æ—Ç: {report.report_type}\n"
                f"–í—Ä–µ–º—è: {report.type}",
                reply_markup=await get_admin_report_menu_keyboard()
            )
        except Exception as e:
            logging.error(f"[process_save_report] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        finally:
            await session.close()
    except ValidationError as e:
        logging.error(f"[process_save_report] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
    except Exception as e:
        logging.error(f"[process_save_report] –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
@admin_report_router.callback_query(F.data == "cancel_report")
async def process_cancel_report(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    await callback.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await callback.message.edit_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=await get_admin_report_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@admin_report_router.callback_query(F.data == "add_photos")
async def process_add_photos(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        report_id = data.get('report_id')
        
        if not report_id:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –æ—Ç—á–µ—Ç–∞",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        async for session in get_session():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                report = await get_report_with_relations(session, report_id)
                if not report:
                    await callback.message.edit_text(
                        "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        reply_markup=await get_admin_report_menu_keyboard()
                    )
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å
                photos_query = select(ReportPhoto).where(ReportPhoto.report_id == report_id)
                result = await session.execute(photos_query)
                photos = result.scalars().all()
                current_photos = [photo.file_path for photo in photos]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                keyboard = await get_photos_keyboard(current_photos)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                await callback.message.edit_text(
                    "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞.\n\n"
                    "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n"
                    "‚ÑπÔ∏è –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.\n\n"
                    f"‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {len(current_photos)}",
                    reply_markup=keyboard
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(ReportStates.add_photos)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ",
                    reply_markup=await get_report_actions_keyboard()
                )
            finally:
                await session.close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_add_photos: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=await get_admin_report_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@admin_report_router.message(ReportStates.add_photos, F.photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        report_id = data.get('report_id')
        
        if not report_id:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –æ—Ç—á–µ—Ç–∞",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        async for session in get_session():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                report = await get_report_with_relations(session, report_id)
                if not report:
                    await message.answer(
                        "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        reply_markup=await get_admin_report_menu_keyboard()
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                photos_dir = os.path.join(settings.MEDIA_ROOT, 'reports', str(report_id), 'photos')
                os.makedirs(photos_dir, exist_ok=True)
                
                saved_photos = []
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
                for photo in message.photo:
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                        file_name = f"{uuid.uuid4()}.jpg"
                        file_path = os.path.join(photos_dir, file_name)
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                        await message.bot.download(
                            photo,
                            destination=file_path
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –≤ –ë–î
                        photo_record = ReportPhoto(
                            report_id=report_id,
                            file_path=file_path,
                            description=None  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∂–µ
                        )
                        session.add(photo_record)
                        saved_photos.append(file_path)
                        
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
                        continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
                await session.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å
                photos_query = select(ReportPhoto).where(ReportPhoto.report_id == report_id)
                result = await session.execute(photos_query)
                photos = result.scalars().all()
                current_photos = [photo.file_path for photo in photos]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                keyboard = await get_photos_keyboard(current_photos)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                await message.answer(
                    f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n"
                    f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –æ—Ç—á–µ—Ç–µ: {len(current_photos)}\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'.",
                    reply_markup=keyboard
                )
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
                await message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
                    reply_markup=await get_report_actions_keyboard()
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_photo: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
            reply_markup=await get_admin_report_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@admin_report_router.callback_query(F.data == "photos_done", ReportStates.add_photos)
async def process_photos_done(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        report_id = data.get('report_id')
        
        if not report_id:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –æ—Ç—á–µ—Ç–∞",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        async for session in get_session():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
                report = await get_report_with_relations(session, report_id)
                if not report:
                    await callback.message.edit_text(
                        "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        reply_markup=await get_admin_report_menu_keyboard()
                    )
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                photos = [photo.file_path for photo in report.photos] if report.photos else []
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
                message_text = (
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                    f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –æ—Ç—á–µ—Ç–µ: {len(photos)}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞
                await callback.message.edit_text(
                    message_text,
                    reply_markup=await get_report_actions_keyboard()
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(ReportStates.edit_report)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
                    reply_markup=await get_report_actions_keyboard()
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_photos_done: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=await get_admin_report_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
@admin_report_router.callback_query(F.data == "add_comments")
async def process_add_comments(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    comments = data.get('comments', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    keyboard = await get_comments_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ—Ç—á–µ—Ç—É.\n",
        reply_markup=keyboard
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ReportStates.add_comments)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
@admin_report_router.message(ReportStates.add_comments)
async def process_comments(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        report_id = data.get('report_id')
        
        if not report_id:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –æ—Ç—á–µ—Ç–∞",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        async for session in get_session():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∏–∑ –ë–î
                report = await get_report_with_relations(session, report_id)
                
                if not report:
                    await message.answer(
                        "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        reply_markup=await get_admin_report_menu_keyboard()
                    )
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ—Ç—á–µ—Ç–µ
                updated_report = await create_report(
                    session=session,
                    data={
                        'report_id': report_id,
                        'comments': message.text
                    }
                )

                if not updated_report:
                    await message.answer(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                        reply_markup=await get_report_actions_keyboard()
                    )
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(comments=message.text)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ
                report_info = (
                    f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ #{report.id}\n\n"
                    f"–¢–∏–ø: {report.type}\n"
                    f"–î–∞—Ç–∞: {report.date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–°—Ç–∞—Ç—É—Å: {report.status}\n"
                    f"–û–±—ä–µ–∫—Ç: {report.object.name}\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ä–∞–±–æ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
                if report.type:
                    report_info += f"–¢–∏–ø —Ä–∞–±–æ—Ç: {report.type}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–∏–ø —Ä–∞–±–æ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
                if report.work_subtype:
                    report_info += f"–ü–æ–¥—Ç–∏–ø —Ä–∞–±–æ—Ç: {report.work_subtype}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ò–¢–†, –µ—Å–ª–∏ –µ—Å—Ç—å
                if report.itr_personnel:
                    itr_names = [itr.full_name for itr in report.itr_personnel]
                    if itr_names:
                        report_info += f"–ò–¢–†: {', '.join(itr_names)}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
                if report.workers:
                    worker_names = [worker.full_name for worker in report.workers]
                    if worker_names:
                        report_info += f"–†–∞–±–æ—á–∏–µ: {', '.join(worker_names)}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
                if report.equipment:
                    equipment_names = [eq.name for eq in report.equipment]
                    if equipment_names:
                        report_info += f"–¢–µ—Ö–Ω–∏–∫–∞: {', '.join(equipment_names)}\n"

                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                if report.photos:
                    photo_count = len(report.photos)
                    report_info += f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_count}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                report_info += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await message.answer(
                    f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n{report_info}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=await get_report_actions_keyboard()
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await state.set_state(ReportStates.edit_report)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}", exc_info=True)
                await message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}",
                    reply_markup=await get_report_actions_keyboard()
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_comments: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            reply_markup=await get_admin_report_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
@admin_report_router.callback_query(F.data == "send_report")
@error_handler
@with_session
async def process_select_report_for_sending(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "draft"
        reports = await get_reports_by_status(session, "draft")
        
        if not reports:
            await callback.message.answer(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç—á–µ—Ç–∞–º–∏
        keyboard = []
        for report in reports:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìÑ –û—Ç—á–µ—Ç #{report.id} –æ—Ç {report.date.strftime('%d.%m.%Y')}",
                    callback_data=f"select_report_{report.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        back_button = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_report_menu")
        keyboard.append([back_button])
        
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞
        await state.set_state(ReportStates.select_report_to_send)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_select_report_for_sending: {str(e)}", exc_info=True)
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤",
            reply_markup=await get_admin_report_menu_keyboard()
        )

@admin_report_router.callback_query(F.data.startswith("select_report_"), ReportStates.select_report_to_send)
async def process_select_report_recipient_list(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
    report_id = int(callback.data.split("_")[2])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        session_gen = get_session()
        session = await session_gen.__anext__()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
            report = await get_report_with_relations(session, report_id)
            if not report:
                await callback.message.edit_text(
                    "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=await get_admin_report_menu_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
            clients = await get_all_clients(session)
            
            if not clients:
                await callback.message.edit_text(
                    "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞",
                    reply_markup=await get_admin_report_menu_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏
            keyboard = []
            for client in clients:
                if client.user:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"üë§ {client.user.username or client.user.telegram_id}",
                            callback_data=f"select_recipient_{client.user.id}"
                        )
                    ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="send_report"
                )
            ])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç—á–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(selected_report_id=report_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            await callback.message.edit_text(
                "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç—á–µ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            await state.set_state(ReportStates.select_report_recipient)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {str(e)}", exc_info=True)
            await callback.message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {str(e)}",
                reply_markup=await get_admin_report_menu_keyboard()
            )
        finally:
            await session.close()
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=await get_admin_report_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç—á–µ—Ç–∞
@admin_report_router.callback_query(F.data.startswith("select_recipient_"), ReportStates.select_report_recipient)
async def process_select_report_recipient(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç—á–µ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ callback_data
        recipient_id = int(callback.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        report_id = data.get('selected_report_id')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
        
        if not report_id:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
            report = await get_report_with_relations(session, report_id)
            if not report:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            success = await ReportService.send_report(session, report.id, recipient_id)
            
            if success:
                await callback.message.answer(
                    f"‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                    f"üìã –¢–∏–ø: {report.type}\n"
                    f"üìÖ –î–∞—Ç–∞: {report.date.strftime('%d.%m.%Y')}\n"
                    f"üèó –û–±—ä–µ–∫—Ç: {report.object.name}"
                )
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞")
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_select_report_recipient: {str(e)}", exc_info=True)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞")

@admin_report_router.callback_query(ReportManagementStates.waiting_for_type)
@error_handler
async def process_report_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞"""
    report_type = callback.data.split(":")[1]
    await state.update_data(report_type=report_type)
    await state.set_state(ReportManagementStates.waiting_for_filter)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
        reply_markup=get_report_filter_keyboard()
    )

@admin_report_router.callback_query(ReportManagementStates.waiting_for_filter)
@error_handler
async def process_report_filter(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    filter_type = callback.data.split(":")[1]
    await state.update_data(filter_type=filter_type)
    await state.set_state(ReportManagementStates.waiting_for_date_range)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024-31.01.2024",
        reply_markup=get_back_keyboard()
    )

@admin_report_router.message(ReportManagementStates.waiting_for_date_range)
@error_handler
@with_session
async def process_date_range(
    message: Message,
    state: FSMContext,
    session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        start_date, end_date = validate_date_range(message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        reports = await get_reports_by_date_range(session, start_date, end_date)
        
        if not reports:
            await message.answer(
                "–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –æ—Ç—á–µ—Ç–∞–º
        summary = await generate_report_summary(reports)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
        await message.answer(summary)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã: {str(e)}")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
@admin_report_router.callback_query(F.data.in_(["morning_report", "evening_report"]), ReportStates.select_report_type)
async def process_report_type_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
    report_type = callback.data.replace("_report", "")
    logging.info(f"[process_report_type_selection] –í—ã–±—Ä–∞–Ω —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: {report_type}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        session_gen = get_session()
        session = await session_gen.__anext__()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            logging.info(f"[process_report_type_selection] –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ç—á–µ—Ç–∞: {data}")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report = await create_base_report(session, {
                'object_id': data['object_id'],
                'report_type': report_type,
                'work_type': data.get('work_type', 'general_construction')
            })
            logging.info(f"[process_report_type_selection] –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å ID: {report.id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            state_data = {
                'report_id': report.id,
                'object_id': data['object_id'],
                'report_type': report_type,
                'type': report_type,
                'work_type': report_type,
                'work_subtype': data.get('work_subtype'),
                'comments': data.get('comments', ''),
                'itr_list': [],
                'workers_list': [],
                'equipment_list': []
            }
            await state.update_data(**state_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            updated_data = await state.get_data()
            logging.info(f"[process_report_type_selection] –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {updated_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞
            await callback.message.answer(
                f"‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
                reply_markup=await get_report_actions_keyboard()
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(ReportStates.select_actions)
            
        except Exception as e:
            logging.error(f"[process_report_type_selection] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
            await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        finally:
            await session.close()
            
    except Exception as e:
        logging.error(f"[process_report_type_selection] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –ë–î: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

@admin_report_router.callback_query(F.data == "back_to_object", ReportStates.select_work_type)
async def process_back_to_object(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    session_gen = get_session()
    session = await session_gen.__anext__()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        objects = await get_all_objects(session)
        
        if not objects:
            await callback.message.edit_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞.",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        keyboard = await get_objects_keyboard(session)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
            reply_markup=keyboard
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(ReportStates.select_object)
    except Exception as e:
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await session.close()

@admin_report_router.callback_query(F.data == "back_to_report_type", ReportStates.select_work_subtype)
async def process_back_to_work_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç"""
    await callback.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ä–∞–±–æ—Ç
    keyboard = get_work_type_keyboard()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç:",
        reply_markup=keyboard
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ReportStates.select_work_type)

async def process_itr_done(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ò–¢–†"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        report_id = state_data.get('report_id')
        itr_list = state_data.get('selected_itrs', [])

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        session_gen = get_session()
        session = await session_gen.__anext__()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –ò–¢–†
            itr_names = []
            for itr_id in itr_list:
                itr = await get_itr_by_id(session, itr_id)
                if itr:
                    itr_names.append(itr.name)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await create_report(session, {
                'report_id': report_id,
                'itr_list': itr_list
            })

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            if itr_names:
                names_text = ", ".join(itr_names)
                await callback.message.answer(
                    f"‚úÖ –ò–¢–† —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç—á–µ—Ç:\n{names_text}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_report_actions_keyboard()
                )
            else:
                await callback.message.answer(
                    "‚úÖ –ò–¢–† —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç—á–µ—Ç.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_report_actions_keyboard()
                )
            
        finally:
            await session.close()
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ò–¢–†: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ò–¢–†") 

@admin_report_router.callback_query(F.data == "export_report")
@error_handler
@with_session
async def process_export_report_menu(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã
        reports = await get_reports_for_export(session)
        
        if not reports:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç—á–µ—Ç–∞–º–∏
        keyboard = InlineKeyboardBuilder()
        for report in reports:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞
            report_date = report.date.strftime('%d.%m.%Y')
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
            object_name = report.object.name if report.object else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç"
            
            keyboard.row(
                InlineKeyboardButton(
                    text=f"üìÑ {object_name} –æ—Ç {report_date}",
                    callback_data=f"select_report_for_export_{report.id}"
                )
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_report_menu"))
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}",
            reply_markup=await get_admin_report_menu_keyboard()
        )

@admin_report_router.callback_query(F.data.startswith("select_report_for_export_"))
@error_handler
@with_session
async def process_select_report_for_export(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
        report_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
        report = await get_report_with_relations(session, report_id)
        if not report:
            await callback.message.edit_text(
                "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç—á–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_report_id=report_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", callback_data="export_pdf"),
            InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export_excel")
        )
        keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_report_menu"))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞
        report_date = report.date.strftime('%d.%m.%Y')
        object_name = report.object.name if report.object else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç"
        
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –æ—Ç—á–µ—Ç:\n"
            f"üìÖ –î–∞—Ç–∞: {report_date}\n"
            f"üèó –û–±—ä–µ–∫—Ç: {object_name}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç—á–µ—Ç–∞: {str(e)}",
            reply_markup=await get_admin_report_menu_keyboard()
        )

@admin_report_router.callback_query(F.data.in_(["export_pdf", "export_excel"]))
@error_handler
@with_session
async def process_export_reports(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        report_id = data.get('selected_report_id')
        
        if not report_id:
            await callback.message.edit_text(
                "‚ùå –û—Ç—á–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑—è–º–∏
        report = await get_report_with_relations(session, report_id)
        if not report:
            await callback.message.edit_text(
                "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=await get_admin_report_menu_keyboard()
            )
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await session.refresh(report, ['object', 'itr_personnel', 'workers', 'equipment', 'photos'])
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        export_dir = os.path.join(settings.MEDIA_ROOT, 'exports')
        os.makedirs(export_dir, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        object_name = report.object.name if report.object else "unknown"
        
        if callback.data == "export_pdf":
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF
            output_path = os.path.join(export_dir, f'report_{object_name}_{timestamp}.pdf')
            export_report_to_pdf([report], output_path)
            file_type = "PDF"
        else:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
            output_path = os.path.join(export_dir, f'report_{object_name}_{timestamp}.xlsx')
            export_report_to_excel([report], output_path)
            file_type = "Excel"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(output_path, 'rb') as file:
            file_content = file.read()
            input_file = BufferedInputFile(file_content, filename=os.path.basename(output_path))
            await callback.message.answer_document(
                document=input_file,
                caption=f"‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {file_type}"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(output_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await get_admin_report_menu_keyboard()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞: {str(e)}",
            reply_markup=await get_admin_report_menu_keyboard()
        )
from aiogram import Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
import logging

from construction_report_bot.middlewares.role_check import admin_required
from construction_report_bot.database.crud import (
    get_all_clients, get_all_objects, create_object, update_object, delete_object,
    get_object_by_id, get_client_by_id
)
from construction_report_bot.config.keyboards import (
    get_object_management_keyboard, get_object_back_keyboard
)
from construction_report_bot.utils.decorators import error_handler, extract_id_from_callback, with_session

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏
object_router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
object_router.message.middleware(admin_required())
object_router.callback_query.middleware(admin_required())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏
class ObjectManagementStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_client_selection = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
class ObjectEditStates(StatesGroup):
    waiting_for_new_name = State()
    waiting_for_client_selection = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏
@object_router.message(F.text == "üèóÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏")
@error_handler
async def cmd_object_management(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_object_management_keyboard()
    )

@object_router.callback_query(F.data == "object_list")
@error_handler
@with_session
async def process_object_list(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    objects = await get_all_objects(session)
    
    if objects:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–æ–≤
        objects_text = "üìã –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤:\n\n"
        
        from sqlalchemy import text
        
        for i, obj in enumerate(objects, start=1):
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            query = text("""
                SELECT c.full_name, c.organization
                FROM clients c
                JOIN client_objects co ON c.id = co.client_id
                WHERE co.object_id = :object_id
            """)
            result = await session.execute(query, {"object_id": obj.id})
            clients = result.fetchall()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑—á–∏–∫–∞—Ö
            objects_text += f"{i}. {obj.name}\n"
            if clients:
                client_info = ", ".join([f"{client.full_name} ({client.organization})" for client in clients])
                objects_text += f"   üìå –ó–∞–∫–∞–∑—á–∏–∫: {client_info}\n"
            else:
                objects_text += f"   üìå –ó–∞–∫–∞–∑—á–∏–∫: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
            objects_text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        for obj in objects:
            builder.row(
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è {obj.name}",
                    callback_data=f"edit_object_{obj.id}"
                )
            )
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="object_back"))
        
        await callback.message.edit_text(
            objects_text,
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_object_back_keyboard()
        )

@object_router.callback_query(F.data == "object_add")
@error_handler
async def process_object_add(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:"
    )
    
    await state.set_state(ObjectManagementStates.waiting_for_name)

@object_router.message(ObjectManagementStates.waiting_for_name)
@error_handler
@with_session
async def process_object_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    name = message.text.strip()
    
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(object_name=name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    clients = await get_all_clients(session)
    
    if clients:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
        clients_text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:\n\n"
        for i, client in enumerate(clients, start=1):
            clients_text += f"{i}. {client.full_name} ({client.organization})\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        for client in clients:
            builder.row(
                InlineKeyboardButton(
                    text=f"‚úÖ {client.full_name}",
                    callback_data=f"select_client_{client.id}"
                )
            )
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="object_back"))
        
        await message.answer(
            clients_text,
            reply_markup=builder.as_markup()
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞
        await state.set_state(ObjectManagementStates.waiting_for_client_selection)
    else:
        await message.answer(
            "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.",
            reply_markup=get_object_back_keyboard()
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

@object_router.callback_query(lambda c: c.data.startswith("select_client_"))
@error_handler
@with_session
async def process_client_selection_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ —á–µ—Ä–µ–∑ callback"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "select_client_ID"
    client_id = extract_id_from_callback(callback.data, "select_client_")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    object_name = data.get("object_name")
    
    if not object_name:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_object_back_keyboard()
        )
        await state.clear()
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        new_object = await create_object(session, {"name": object_name})
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
        client = await get_client_by_id(session, client_id)
        
        if client:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ –≤ —Ç–∞–±–ª–∏—Ü—É client_objects
            from sqlalchemy import text
            await session.execute(
                text("INSERT INTO client_objects (client_id, object_id) VALUES (:client_id, :object_id)"),
                {"client_id": client_id, "object_id": new_object.id}
            )
            await session.commit()
            
            await callback.message.edit_text(
                f"‚úÖ –û–±—ä–µ–∫—Ç \"{object_name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–∫–∞–∑—á–∏–∫—É {client.full_name}!",
                reply_markup=get_object_back_keyboard()
            )
        else:
            await callback.message.edit_text(
                f"‚úÖ –û–±—ä–µ–∫—Ç \"{object_name}\" –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –∑–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_object_back_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {e}",
            reply_markup=get_object_back_keyboard()
        )
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await session.rollback()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
@object_router.callback_query(lambda c: c.data.startswith("edit_object_") and not c.data.startswith("edit_object_name_") and not c.data.startswith("edit_object_client_"))
@error_handler
@with_session
async def process_object_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "edit_object_ID"
    object_id = extract_id_from_callback(callback.data, "edit_object_")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
    obj = await get_object_by_id(session, object_id)
    
    if not obj:
        logging.error(f"–û–±—ä–µ–∫—Ç —Å ID {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_object_back_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(object_id=object_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –æ–±—ä–µ–∫—Ç–∞
    from sqlalchemy import select, text
    from sqlalchemy.orm import selectinload
    
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –æ–±—ä–µ–∫—Ç–∞
    query = text("""
        SELECT c.id, c.full_name, c.organization
        FROM clients c
        JOIN client_objects co ON c.id = co.client_id
        WHERE co.object_id = :object_id
    """)
    result = await session.execute(query, {"object_id": object_id})
    object_clients = result.fetchall()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_object_name_{object_id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data=f"edit_object_client_{object_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data=f"delete_object_{object_id}")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="object_back"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑—á–∏–∫–∞—Ö
    clients_text = "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤"
    if object_clients:
        clients_text = "–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∏:\n"
        for i, client in enumerate(object_clients, start=1):
            clients_text += f"{i}. {client.full_name} ({client.organization})\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    new_text = (
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {obj.name}\n\n"
        f"{clients_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(
            text=new_text,
            reply_markup=builder.as_markup()
        )
    except Exception as edit_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.answer("–î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã")

@object_router.callback_query(F.data.startswith("delete_object_"))
@error_handler
async def process_object_delete(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "delete_object_ID"
    object_id = extract_id_from_callback(callback.data, "delete_object_")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"object_delete_confirm_{object_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_object_{object_id}")
    )
    
    try:
        await callback.message.edit_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@object_router.callback_query(F.data.startswith("object_delete_confirm_"))
@error_handler
@with_session
async def confirm_object_delete(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "object_delete_confirm_ID"
        object_id_str = callback.data.replace("object_delete_confirm_", "")
        object_id = int(object_id_str)
        
        # –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞, —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏
        from sqlalchemy import text
        await session.execute(
            text("DELETE FROM client_objects WHERE object_id = :object_id"),
            {"object_id": object_id}
        )
        
        # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç
        result = await delete_object(session, object_id)
        
        if result:
            await callback.message.edit_text(
                "‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                reply_markup=get_object_back_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=get_object_back_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {e}",
            reply_markup=get_object_back_keyboard()
        )
        await session.rollback()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –æ–±—ä–µ–∫—Ç–∞
@object_router.callback_query(F.data.startswith("edit_object_name_"))
@error_handler
@with_session
async def process_edit_object_name(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    # –í—ã–¥–µ–ª—è–µ–º ID –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "edit_object_name_ID"
    object_id = extract_id_from_callback(callback.data, "edit_object_name_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    obj = await get_object_by_id(session, object_id)
    if not obj:
        logging.error(f"–û–±—ä–µ–∫—Ç —Å ID {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_object_back_keyboard()
        )
        return
    
    await state.update_data(object_id=object_id)
    
    try:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:"
        )
        await state.set_state(ObjectEditStates.waiting_for_new_name)
    except Exception as edit_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:"
        )
        await state.set_state(ObjectEditStates.waiting_for_new_name)

@object_router.message(ObjectEditStates.waiting_for_new_name)
@error_handler
@with_session
async def process_new_object_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    name = message.text.strip()
    
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:")
        return
    
    user_data = await state.get_data()
    object_id = user_data["object_id"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    await update_object(session, object_id, {"name": name})
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {name}",
        reply_markup=get_object_back_keyboard()
    )
    
    await state.clear()

@object_router.callback_query(F.data == "object_back")
@error_handler
async def process_object_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_object_management_keyboard()
    )

@object_router.callback_query(F.data == "object_delete")
@error_handler
@with_session
async def process_object_delete_menu(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    objects = await get_all_objects(session)
    
    if objects:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–æ–≤
        objects_text = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        for i, obj in enumerate(objects, start=1):
            objects_text += f"{i}. {obj.name}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        for obj in objects:
            builder.row(
                InlineKeyboardButton(
                    text=f"üóëÔ∏è {obj.name}",
                    callback_data=f"delete_object_{obj.id}"
                )
            )
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="object_back"))
        
        await callback.message.edit_text(
            objects_text,
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_object_back_keyboard()
        )

@object_router.callback_query(F.data.startswith("edit_object_client_"))
@error_handler
@with_session
async def process_edit_object_client(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    try:
        # –í—ã–¥–µ–ª—è–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "edit_object_client_ID"
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID, —Ç–∞–∫ –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç "edit_object_client_ID"
        object_id_str = callback.data.replace("edit_object_client_", "")
        object_id = int(object_id_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        obj = await get_object_by_id(session, object_id)
        if not obj:
            logging.error(f"–û–±—ä–µ–∫—Ç —Å ID {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.message.edit_text(
                "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_object_back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(object_id=object_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
        clients = await get_all_clients(session)
        
        if not clients:
            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.",
                reply_markup=get_object_back_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –æ–±—ä–µ–∫—Ç–∞
        from sqlalchemy import text
        query = text("""
            SELECT client_id FROM client_objects 
            WHERE object_id = :object_id
        """)
        result = await session.execute(query, {"object_id": object_id})
        current_client_ids = [row[0] for row in result.fetchall()]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        clients_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ \"{obj.name}\":\n\n"
        for client in clients:
            is_selected = client.id in current_client_ids
            prefix = "‚úÖ " if is_selected else ""
            builder.row(
                InlineKeyboardButton(
                    text=f"{prefix}{client.full_name} ({client.organization})",
                    callback_data=f"select_object_client_{object_id}_{client.id}"
                )
            )
        
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_object_{object_id}"))
        
        await callback.message.edit_text(
            clients_text,
            reply_markup=builder.as_markup()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
        await state.set_state(ObjectEditStates.waiting_for_client_selection)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_edit_object_client: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=get_object_back_keyboard()
        )

@object_router.callback_query(lambda c: c.data.startswith("select_object_client_"))
@error_handler
@with_session
async def process_select_object_client(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "select_object_client_OBJECT_ID_CLIENT_ID"
    parts = callback.data.split("_")
    if len(parts) < 5:
        await callback.message.edit_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_object_back_keyboard()
        )
        return
    
    object_id = int(parts[3])
    client_id = int(parts[4])
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
        obj = await get_object_by_id(session, object_id)
        client = await get_client_by_id(session, client_id)
        
        if not obj or not client:
            await callback.message.edit_text(
                "–û–±—ä–µ–∫—Ç –∏–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_object_back_keyboard()
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏ –æ–±—ä–µ–∫—Ç–∞ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏
        from sqlalchemy import text
        await session.execute(
            text("DELETE FROM client_objects WHERE object_id = :object_id"),
            {"object_id": object_id}
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
        await session.execute(
            text("INSERT INTO client_objects (client_id, object_id) VALUES (:client_id, :object_id)"),
            {"client_id": client_id, "object_id": object_id}
        )
        
        await session.commit()
        
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –æ–±—ä–µ–∫—Ç–∞ \"{obj.name}\" —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {client.full_name}.",
            reply_markup=get_object_back_keyboard()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ–±—ä–µ–∫—Ç–∞: {e}")
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ–±—ä–µ–∫—Ç–∞: {e}",
            reply_markup=get_object_back_keyboard()
        )
        await session.rollback()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear() 
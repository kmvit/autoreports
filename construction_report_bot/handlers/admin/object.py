from aiogram import Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
import logging

from construction_report_bot.middlewares.role_check import admin_required
from construction_report_bot.database.crud import (
    get_all_objects, create_object, update_object, delete_object,
    get_object_by_id
)
from construction_report_bot.config.keyboards import (
    get_object_management_keyboard, get_object_back_keyboard
)
from construction_report_bot.utils.decorators import error_handler, extract_id_from_callback, with_session

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏
object_router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
object_router.message.middleware(admin_required())
object_router.callback_query.middleware(admin_required())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏
class ObjectManagementStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_client_selection = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
class ObjectEditStates(StatesGroup):
    waiting_for_new_name = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏
@object_router.message(F.text == "üèóÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏")
@error_handler
async def cmd_object_management(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_object_management_keyboard()
    )

@object_router.callback_query(F.data == "object_list")
@error_handler
@with_session
async def process_object_list(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    objects = await get_all_objects(session)
    
    if objects:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–æ–≤
        objects_text = "üìã –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤:\n\n"
        for i, obj in enumerate(objects, start=1):
            objects_text += f"{i}. {obj.name}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        for obj in objects:
            builder.row(
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è {obj.name}",
                    callback_data=f"edit_object_{obj.id}"
                )
            )
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="object_back"))
        
        await callback.message.edit_text(
            objects_text,
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_object_back_keyboard()
        )

@object_router.callback_query(F.data == "object_add")
@error_handler
async def process_object_add(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:"
    )
    
    await state.set_state(ObjectManagementStates.waiting_for_name)

@object_router.message(ObjectManagementStates.waiting_for_name)
@error_handler
@with_session
async def process_object_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    name = message.text.strip()
    
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:")
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
    await create_object(session, {"name": name})
    
    await message.answer(f"‚úÖ –û–±—ä–µ–∫—Ç \"{name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
@object_router.callback_query(lambda c: c.data.startswith("edit_object_") and not c.data.startswith("edit_object_name_"))
@error_handler
@with_session
async def process_object_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "edit_object_ID"
    object_id = extract_id_from_callback(callback.data, "edit_object_")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
    obj = await get_object_by_id(session, object_id)
    
    if not obj:
        logging.error(f"–û–±—ä–µ–∫—Ç —Å ID {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_object_back_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(object_id=object_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_object_name_{object_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data=f"delete_object_{object_id}")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="object_back"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    new_text = (
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {obj.name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(
            text=new_text,
            reply_markup=builder.as_markup()
        )
    except Exception as edit_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.answer("–î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã")

@object_router.callback_query(F.data.startswith("delete_object_"))
@error_handler
async def process_object_delete(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "delete_object_ID"
    object_id = extract_id_from_callback(callback.data, "delete_object_")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_object_{object_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_object_{object_id}")
    )
    
    try:
        await callback.message.edit_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@object_router.callback_query(F.data.startswith("confirm_delete_object_"))
@error_handler
@with_session
async def confirm_object_delete(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "confirm_delete_object_ID"
    object_id = extract_id_from_callback(callback.data, "confirm_delete_object_")
    
    # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç
    await delete_object(session, object_id)
    
    await callback.message.edit_text(
        "‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
        reply_markup=get_object_back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –æ–±—ä–µ–∫—Ç–∞
@object_router.callback_query(F.data.startswith("edit_object_name_"))
@error_handler
@with_session
async def process_edit_object_name(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    # –í—ã–¥–µ–ª—è–µ–º ID –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "edit_object_name_ID"
    object_id = extract_id_from_callback(callback.data, "edit_object_name_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    obj = await get_object_by_id(session, object_id)
    if not obj:
        logging.error(f"–û–±—ä–µ–∫—Ç —Å ID {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_object_back_keyboard()
        )
        return
    
    await state.update_data(object_id=object_id)
    
    try:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:"
        )
        await state.set_state(ObjectEditStates.waiting_for_new_name)
    except Exception as edit_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:"
        )
        await state.set_state(ObjectEditStates.waiting_for_new_name)

@object_router.message(ObjectEditStates.waiting_for_new_name)
@error_handler
@with_session
async def process_new_object_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    name = message.text.strip()
    
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:")
        return
    
    user_data = await state.get_data()
    object_id = user_data["object_id"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    await update_object(session, object_id, {"name": name})
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {name}",
        reply_markup=get_object_back_keyboard()
    )
    
    await state.clear()

@object_router.callback_query(F.data == "object_back")
@error_handler
async def process_object_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_object_management_keyboard()
    )

@object_router.callback_query(F.data == "object_delete")
@error_handler
@with_session
async def process_object_delete_menu(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    objects = await get_all_objects(session)
    
    if objects:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–æ–≤
        objects_text = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        for i, obj in enumerate(objects, start=1):
            objects_text += f"{i}. {obj.name}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        for obj in objects:
            builder.row(
                InlineKeyboardButton(
                    text=f"üóëÔ∏è {obj.name}",
                    callback_data=f"delete_object_{obj.id}"
                )
            )
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="object_back"))
        
        await callback.message.edit_text(
            objects_text,
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_object_back_keyboard()
        ) 
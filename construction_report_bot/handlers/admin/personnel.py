from aiogram import Router, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import logging

from construction_report_bot.middlewares.role_check import admin_required
from construction_report_bot.database.models import ITR, Worker
from construction_report_bot.database.crud import (
    get_all_itr, create_itr, update_itr, delete_itr,
    get_all_workers, create_worker, update_worker, delete_worker
)
from construction_report_bot.utils.decorators import error_handler, with_session
from construction_report_bot.utils.validators import validate_full_name
from construction_report_bot.config.keyboards import get_personnel_management_keyboard, get_admin_menu_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
personnel_router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
personnel_router.message.middleware(admin_required())
personnel_router.callback_query.middleware(admin_required())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
@personnel_router.message(F.text == "üë∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º")
@personnel_router.message(Command("personnel"))
@error_handler
async def cmd_personnel_management(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"""
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_personnel_management_keyboard()
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
class PersonnelManagementStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_position = State()
    waiting_for_type = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
class PersonnelEditStates(StatesGroup):
    waiting_for_new_name = State()
    waiting_for_new_position = State()

# ============= –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–¢–† =============

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ò–¢–†
@personnel_router.callback_query(F.data == "itr_list")
@error_handler
@with_session
async def process_itr_list(callback: CallbackQuery, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ò–¢–† —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ò–¢–†
    itr_list = await get_all_itr(session)

    if not itr_list:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –ò–¢–† –ø—É—Å—Ç",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="personnel_back"
            ).as_markup()
        )
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –ò–¢–†:\n\n"
    builder = InlineKeyboardBuilder()

    for itr in itr_list:
        text += f"üë§ {itr.full_name}\n\n"
        builder.button(
            text=f"‚úèÔ∏è {itr.full_name}",
            callback_data=f"edit_itr_{itr.id}"
        )

    builder.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="personnel_back"
    )
    builder.adjust(1)

    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–¢–†
@personnel_router.callback_query(F.data == "itr_add")
@error_handler
async def process_add_itr(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ò–¢–†
    """
    await callback.answer()
    
    await state.set_state(PersonnelManagementStates.waiting_for_name)
    await state.update_data(personnel_type="itr")
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ –ò–¢–†:",
        reply_markup=InlineKeyboardBuilder().button(
            text="üîô –û—Ç–º–µ–Ω–∞",
            callback_data="personnel_back"
        ).as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–¢–†
@personnel_router.callback_query(F.data.startswith("edit_itr_"))
@error_handler
@with_session
async def process_edit_itr(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–¢–†
    """
    await callback.answer()
    
    itr_id = int(callback.data.split("_")[-1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ò–¢–† –≤ –±–∞–∑–µ
    itr = await session.get(ITR, itr_id)
    
    if not itr:
        await callback.message.edit_text(
            "–ò–¢–† –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="itr_list"
            ).as_markup()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ò–¢–† –∏ —Ç–µ–∫—É—â–µ–µ –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(personnel_id=itr.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data=f"edit_itr_name_{itr.id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_itr_{itr.id}")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="itr_list"))
    builder.adjust(1)

    new_text = (
        f"–ò–¢–†: {itr.full_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    try:
        await callback.message.edit_text(
            text=new_text,
            reply_markup=builder.as_markup()
        )
    except Exception as edit_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer("–î–∞–Ω–Ω—ã–µ –ò–¢–† –∞–∫—Ç—É–∞–ª—å–Ω—ã")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ò–¢–†
@personnel_router.callback_query(F.data.startswith("edit_itr_name_"))
@error_handler
@with_session 
async def process_edit_itr_name_button(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ò–¢–†"""
    logging.info(f"--- Start process_edit_itr_name_button --- Callback: {callback.data}")
    print(f"--- Start process_edit_itr_name_button --- Callback: {callback.data}")
    
    await callback.answer()
    
    try:
        logging.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        user_data = await state.get_data()
        logging.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {user_data}")
        print(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {user_data}")
        
        current_name = user_data.get("current_name", "")
        personnel_id = user_data.get("personnel_id")
        personnel_type = user_data.get("personnel_type") # –î–æ–±–∞–≤–∏–º —Ç–∏–ø –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: personnel_id={personnel_id}, current_name='{current_name}', personnel_type='{personnel_type}'")
        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: personnel_id={personnel_id}, current_name='{current_name}', personnel_type='{personnel_type}'")
        
        if not personnel_id:
            logging.warning("–û—à–∏–±–∫–∞: personnel_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            print("–û—à–∏–±–∫–∞: personnel_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                reply_markup=InlineKeyboardBuilder().button(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="itr_list"
                ).as_markup()
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–¢–† –≤ –ë–î 
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–¢–† —Å ID {personnel_id} –≤ –ë–î")
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–¢–† —Å ID {personnel_id} –≤ –ë–î")
        itr = await session.get(ITR, int(personnel_id))
        if not itr:
            logging.warning(f"–ò–¢–† —Å ID {personnel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            print(f"–ò–¢–† —Å ID {personnel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            await callback.message.edit_text(
                "–ò–¢–† –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardBuilder().button(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="itr_list"
                ).as_markup()
            )
            return
        logging.info(f"–ò–¢–† {personnel_id} –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        print(f"–ò–¢–† {personnel_id} –Ω–∞–π–¥–µ–Ω –≤ –ë–î")

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ "itr"
        logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ personnel_type –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞ 'itr'")
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ personnel_type –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞ 'itr'")
        await state.update_data(personnel_type="itr")
        
        logging.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è PersonnelEditStates.waiting_for_new_name")
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è PersonnelEditStates.waiting_for_new_name")
        await state.set_state(PersonnelEditStates.waiting_for_new_name)
        
        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏")
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏")
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–µ–µ –§–ò–û: {current_name}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –ò–¢–†:",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –û—Ç–º–µ–Ω–∞",
                callback_data="itr_list"
            ).as_markup()
        )
        logging.info("--- End process_edit_itr_name_button ---")
        print("--- End process_edit_itr_name_button ---")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_edit_itr_name_button: {e}", exc_info=True)
        print(f"–û–®–ò–ë–ö–ê –≤ process_edit_itr_name_button: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ò–¢–†
@personnel_router.callback_query(F.data.startswith("delete_itr_"))
@error_handler
@with_session
async def process_delete_itr(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ò–¢–†"""
    await callback.answer()
    
    user_data = await state.get_data()
    personnel_id = user_data.get("personnel_id")
    
    if not personnel_id:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="itr_list"
            ).as_markup()
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ò–¢–†
        itr = await session.get(ITR, personnel_id)
        if not itr:
            await callback.message.edit_text(
                "–ò–¢–† –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardBuilder().button(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="itr_list"
                ).as_markup()
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –ò–¢–†
        await delete_itr(session, personnel_id)
        
        await callback.message.edit_text(
            f"‚úÖ –ò–¢–† {itr.full_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ö —Å–ø–∏—Å–∫—É –ò–¢–†",
                callback_data="itr_list"
            ).as_markup()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ò–¢–†: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ò–¢–†",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="itr_list"
            ).as_markup()
        )

# ============= –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ê–ë–û–ß–ò–ú–ò =============

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö
@personnel_router.callback_query(F.data == "worker_list")
@error_handler
@with_session
async def process_workers_list(callback: CallbackQuery, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    await callback.answer()
    
    workers_list = await get_all_workers(session)

    if not workers_list:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—É—Å—Ç",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="personnel_back"
            ).as_markup()
        )
        return

    text = "üìã –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö:\n\n"
    builder = InlineKeyboardBuilder()

    for worker in workers_list:
        text += f"üë§ {worker.full_name}\nüìù –î–æ–ª–∂–Ω–æ—Å—Ç—å: {worker.position}\n\n"
        builder.button(
            text=f"‚úèÔ∏è {worker.full_name}",
            callback_data=f"edit_worker_{worker.id}"
        )

    builder.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="personnel_back"
    )
    builder.adjust(1)

    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ
@personnel_router.callback_query(F.data == "worker_add")
@error_handler
async def process_add_worker(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ
    """
    await callback.answer()
    
    await state.set_state(PersonnelManagementStates.waiting_for_name)
    await state.update_data(personnel_type="worker")
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ:",
        reply_markup=InlineKeyboardBuilder().button(
            text="üîô –û—Ç–º–µ–Ω–∞",
            callback_data="personnel_back"
        ).as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ
@personnel_router.callback_query(F.data.startswith("edit_worker_"))
@error_handler
@with_session
async def process_edit_worker(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ
    """
    await callback.answer()
    
    worker_id = int(callback.data.split("_")[-1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤ –±–∞–∑–µ
    worker = await session.get(Worker, worker_id)
    if not worker:
        await callback.message.edit_text(
            "–†–∞–±–æ—á–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="worker_list"
            ).as_markup()
        )
        return
    
    await state.update_data(
        personnel_id=worker_id,
        personnel_type="worker",
        current_name=worker.full_name,
        current_position=worker.position
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data="edit_worker_name")
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data="edit_worker_position")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_worker")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="worker_list")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"–†–∞–±–æ—á–∏–π: {worker.full_name}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {worker.position}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ä–∞–±–æ—á–µ–≥–æ
@personnel_router.callback_query(F.data == "edit_worker_name")
@error_handler
async def process_edit_worker_name_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ä–∞–±–æ—á–µ–≥–æ"""
    await callback.answer()
    
    user_data = await state.get_data()
    current_name = user_data.get("current_name", "")
    
    await state.set_state(PersonnelEditStates.waiting_for_new_name)
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –§–ò–û: {current_name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —Ä–∞–±–æ—á–µ–≥–æ:",
        reply_markup=InlineKeyboardBuilder().button(
            text="üîô –û—Ç–º–µ–Ω–∞",
            callback_data="worker_list"
        ).as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ
@personnel_router.callback_query(F.data == "edit_worker_position")
@error_handler
async def process_edit_worker_position_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ"""
    await callback.answer()
    
    user_data = await state.get_data()
    current_position = user_data.get("current_position", "")
    
    await state.set_state(PersonnelEditStates.waiting_for_new_position)
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {current_position}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ:",
        reply_markup=InlineKeyboardBuilder().button(
            text="üîô –û—Ç–º–µ–Ω–∞",
            callback_data="worker_list"
        ).as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ
@personnel_router.callback_query(F.data == "delete_worker")
@error_handler
@with_session
async def process_delete_worker(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ"""
    await callback.answer()
    
    user_data = await state.get_data()
    personnel_id = user_data.get("personnel_id")
    
    if not personnel_id:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="worker_list"
            ).as_markup()
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ
        worker = await session.get(Worker, personnel_id)
        if not worker:
            await callback.message.edit_text(
                "–†–∞–±–æ—á–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardBuilder().button(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="worker_list"
                ).as_markup()
            )
            return
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞–±–æ—á–µ–≥–æ
        await delete_worker(session, personnel_id)
        
        await callback.message.edit_text(
            f"‚úÖ –†–∞–±–æ—á–∏–π {worker.full_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ö —Å–ø–∏—Å–∫—É —Ä–∞–±–æ—á–∏—Ö",
                callback_data="worker_list"
            ).as_markup()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="worker_list"
            ).as_markup()
        )

# ============= –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò =============

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@personnel_router.message(PersonnelManagementStates.waiting_for_name)
@error_handler
@with_session
async def process_personnel_name(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    try:
        if not validate_full_name(message.text):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ' –∏–ª–∏ '–§–∞–º–∏–ª–∏—è –ò.–û.'")
            return

        name = message.text.strip()
        user_data = await state.get_data()
        personnel_type = user_data.get("personnel_type", "")
        
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {name}, —Ç–∏–ø: {personnel_type}")
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {name}, —Ç–∏–ø: {personnel_type}")
        if personnel_type == "itr":
            # –î–ª—è –ò–¢–† —Å–æ–∑–¥–∞–µ–º —Å—Ä–∞–∑—É, –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
            itr_data = {
                "full_name": name
            }
            itr = await create_itr(session, itr_data)
            await message.answer(
                f"‚úÖ –ò–¢–† —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n\n"
                f"üë§ –§–ò–û: {itr.full_name}"
            )
            await state.clear()
            await cmd_personnel_management(message)
        elif personnel_type == "worker":
            # –î–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
            await state.update_data(name=name)
            await state.set_state(PersonnelManagementStates.waiting_for_position)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ:")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {personnel_type}")
            await state.clear()
            await cmd_personnel_management(message)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await cmd_personnel_management(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ
@personnel_router.message(PersonnelManagementStates.waiting_for_position)
@error_handler
@with_session
async def process_personnel_position(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ
    """
    try:
        position = message.text.strip()
        
        if not position:
            await message.answer("‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ:")
            return
        
        user_data = await state.get_data()
        name = user_data.get("name", "")
        
        if not name:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–º—è —Ä–∞–±–æ—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            await cmd_personnel_management(message)
            return
        
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ: –ò–º—è={name}, –î–æ–ª–∂–Ω–æ—Å—Ç—å={position}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–µ–≥–æ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é
        worker_data = {
            "full_name": name,
            "position": position
        }
        worker = await create_worker(session, worker_data)
        await message.answer(
            f"‚úÖ –†–∞–±–æ—á–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n\n"
            f"üë§ –§–ò–û: {worker.full_name}\n"
            f"üìù –î–æ–ª–∂–Ω–æ—Å—Ç—å: {worker.position}"
        )
        
        await state.clear()
        await cmd_personnel_management(message)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await cmd_personnel_management(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@personnel_router.message(PersonnelEditStates.waiting_for_new_name)
@error_handler
@with_session
async def process_new_personnel_name(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    try:
        name = message.text.strip()
        
        if not validate_full_name(name):
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û "
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –∏–ª–∏ –ò–≤–∞–Ω–æ–≤ –ò.–ò.):"
            )
            return
        
        user_data = await state.get_data()
        personnel_id = user_data.get("personnel_id")
        personnel_type = user_data.get("personnel_type", "")
        
        if not personnel_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            await state.clear()
            await cmd_personnel_management(message)
            return
        
        try:
            personnel_id = int(personnel_id)
        except (ValueError, TypeError):
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            await state.clear()
            await cmd_personnel_management(message)
            return
        
        if personnel_type == "itr":
            # –û–±–Ω–æ–≤–ª—è–µ–º –ò–¢–†
            itr_data = {"full_name": name}
            await update_itr(session, personnel_id, itr_data)
            await message.answer(f"‚úÖ –§–ò–û –ò–¢–† —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {name}")
            await state.clear()
            await cmd_personnel_management(message)
        elif personnel_type == "worker":
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Ä–∞–±–æ—á–µ–≥–æ
            worker_data = {"full_name": name}
            await update_worker(session, personnel_id, worker_data)
            await message.answer(f"‚úÖ –§–ò–û —Ä–∞–±–æ—á–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {name}")
            await state.clear()
            await cmd_personnel_management(message)
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            await state.clear()
            await cmd_personnel_management(message)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await cmd_personnel_management(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ
@personnel_router.message(PersonnelEditStates.waiting_for_new_position)
@error_handler
@with_session
async def process_new_personnel_position(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ
    """
    try:
        position = message.text.strip()
        
        if not position:
            await message.answer("–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ:")
            return
        
        user_data = await state.get_data()
        personnel_id = user_data.get("personnel_id")
        personnel_type = user_data.get("personnel_type", "")
        
        if not personnel_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            await state.clear()
            await cmd_personnel_management(message)
            return
        
        if personnel_type == "worker":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∏–ª–∏ –∏–º—è –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
            if "new_name" in user_data:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏ –∏–º—è, –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
                new_name = user_data.get("new_name")
                await update_worker(session, personnel_id, {"full_name": new_name, "position": position})
                await message.answer(
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
                    f"üë§ –§–ò–û: {new_name}\n"
                    f"üìù –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}"
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
                worker = await session.get(Worker, personnel_id)
                if not worker:
                    await message.answer("–†–∞–±–æ—á–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
                    await state.clear()
                    await cmd_personnel_management(message)
                    return
                
                await update_worker(session, personnel_id, {"position": position})
                await message.answer(
                    f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ {worker.full_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {position}"
                )
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
        
        await state.clear()
        await cmd_personnel_management(message)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await cmd_personnel_management(message)

# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò =============

# –ù–∞—Å—Ç—Ä–æ–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
@personnel_router.callback_query(F.data == "personnel_back")
@error_handler
async def process_personnel_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"""
    await callback.answer()
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_personnel_management_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@personnel_router.callback_query(F.data == "admin_back")
@error_handler
async def process_admin_back(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    await callback.answer()
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    from construction_report_bot.config.keyboards import get_admin_keyboard
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏:",
        reply_markup=await get_admin_keyboard()
    )
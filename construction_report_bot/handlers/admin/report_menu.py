import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
from typing import List

from construction_report_bot.database.crud import (
    get_all_reports,
    get_report_by_id,
    get_reports_by_status,
    get_all_objects,
    get_all_itr,
    get_reports_by_object,
    get_reports_by_itr,
    get_reports_by_type,
    get_reports_by_date,
    get_object_by_id,
    get_reports_grouped_by_objects,
    delete_report
)
from construction_report_bot.config.keyboards import get_admin_report_menu_keyboard, get_back_keyboard
from construction_report_bot.utils.decorators import error_handler, with_session
from construction_report_bot.middlewares.role_check import admin_required
from construction_report_bot.utils.logging.logger import log_admin_action, log_error
from construction_report_bot.states.report_states import ReportStates, ReportManagementStates
from construction_report_bot.services.report_service import ReportService

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_report_menu_router = Router()
# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
admin_report_menu_router.message.middleware(admin_required())
admin_report_menu_router.callback_query.middleware(admin_required())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_report_menu_router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞–º–∏")
async def show_admin_report_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    keyboard = await get_admin_report_menu_keyboard()
    await message.answer(
        "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=keyboard
    )

@admin_report_menu_router.callback_query(F.data == "admin_report_menu")
async def show_admin_report_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ callback"""
    keyboard = await get_admin_report_menu_keyboard()
    await callback.message.edit_text(
        "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=keyboard
    )

@admin_report_menu_router.callback_query(F.data == "my_reports")
@error_handler
@with_session
async def process_my_reports(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ
    keyboard = [
        [InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="filter_reports_date")],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="show_all_reports")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_report_menu")]
    ]
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@admin_report_menu_router.callback_query(F.data.startswith("filter_reports_"))
@error_handler
@with_session
async def apply_report_filter(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ –æ—Ç—á–µ—Ç–∞–º"""
    filter_type = callback.data.replace("filter_reports_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(filter_type=filter_type)
    
    if filter_type == "date":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")]
            ])
        )
        await state.set_state(ReportStates.waiting_for_date)

@admin_report_menu_router.message(ReportStates.waiting_for_date)
@error_handler
@with_session
async def process_date_filter(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date = datetime.strptime(message.text, "%d.%m.%Y")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
        reports = await get_reports_by_date(session, date)
        
        if reports:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
            grouped_reports = {}
            for report in reports:
                object_id = report.object_id
                if object_id not in grouped_reports:
                    grouped_reports[object_id] = []
                grouped_reports[object_id].append(report)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
            keyboard = []
            for object_id, object_reports in grouped_reports.items():
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
                object_info = await get_object_by_id(session, object_id)
                if not object_info:
                    continue
                    
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
                report_count = len(object_reports)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
                button_text = f"üèóÔ∏è {object_info.name} ({report_count} –æ—Ç—á–µ—Ç–æ–≤)"
                callback_data = f"date_object_reports_{date.strftime('%Y%m%d')}_{object_id}"
                keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")])
            
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ {date.strftime('%d.%m.%Y')}:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        else:
            await message.answer(
                f"–û—Ç—á–µ—Ç–æ–≤ –∑–∞ {date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")]
                ])
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")]
            ])
        )

@admin_report_menu_router.callback_query(F.data.startswith("date_object_reports_"))
@error_handler
@with_session
async def show_date_object_reports(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤ (—É—Ç—Ä–µ–Ω–Ω–∏–π/–≤–µ—á–µ—Ä–Ω–∏–π) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
    logger.info(f"[show_date_object_reports] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback.data}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
    parts = callback.data.split("_")
    date_str = parts[3]
    object_id = int(parts[4])
    logger.info(f"[show_date_object_reports] –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: date_str={date_str}, object_id={object_id}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
    date = datetime.strptime(date_str, '%Y-%m-%d')
    logger.info(f"[show_date_object_reports] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞: {date}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    object_info = await get_object_by_id(session, object_id)
    if not object_info:
        logger.error(f"[show_date_object_reports] –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {object_id}")
        await callback.message.edit_text(
            "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")]
            ])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
    reports = await get_reports_by_object(session, object_id)
    logger.info(f"[show_date_object_reports] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(reports)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
    filtered_reports = [r for r in reports if r.date.date() == date.date()]
    logger.info(f"[show_date_object_reports] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ: {len(filtered_reports)}")
    
    if filtered_reports:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ —Ç–∏–ø—É (—É—Ç—Ä–µ–Ω–Ω–∏–π/–≤–µ—á–µ—Ä–Ω–∏–π)
        morning_reports = []
        evening_reports = []
        
        for report in filtered_reports:
            if report.type == "morning":
                morning_reports.append(report)
            else:
                evening_reports.append(report)
        
        logger.info(f"[show_date_object_reports] –£—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—Ç—á–µ—Ç–æ–≤: {len(morning_reports)}, –≤–µ—á–µ—Ä–Ω–∏—Ö: {len(evening_reports)}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if morning_reports:
            button_text = f"üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π ({len(morning_reports)} –æ—Ç—á–µ—Ç–æ–≤)"
            callback_data = f"date_object_type_reports_{date_str}_{object_id}_morning"
            logger.info(f"[show_date_object_reports] –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button_text} —Å callback_data: {callback_data}")
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if evening_reports:
            button_text = f"üåÜ –í–µ—á–µ—Ä–Ω–∏–π ({len(evening_reports)} –æ—Ç—á–µ—Ç–æ–≤)"
            callback_data = f"date_object_type_reports_{date_str}_{object_id}_evening"
            logger.info(f"[show_date_object_reports] –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button_text} —Å callback_data: {callback_data}")
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="filter_reports_date")])
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}' –∑–∞ {date.strftime('%d.%m.%Y')}:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await callback.message.edit_text(
            f"–û—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}' –∑–∞ {date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")]
            ])
        )

@admin_report_menu_router.callback_query(F.data.startswith("date_object_type_reports_"))
@error_handler
@with_session
async def show_date_object_type_reports(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
    logger.info(f"[show_date_object_type_reports] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback.data}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É, ID –æ–±—ä–µ–∫—Ç–∞ –∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
    parts = callback.data.split("_")
    date_str = parts[4]
    object_id = int(parts[5])
    report_type = parts[6]
    
    logger.info(f"[show_date_object_type_reports] –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: date_str={date_str}, object_id={object_id}, report_type={report_type}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
    date = datetime.strptime(date_str, '%Y-%m-%d')
    logger.info(f"[show_date_object_type_reports] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞: {date}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    object_info = await get_object_by_id(session, object_id)
    if not object_info:
        logger.error(f"[show_date_object_type_reports] –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {object_id}")
        await callback.message.edit_text(
            "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")]
            ])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
    reports = await get_reports_by_object(session, object_id)
    logger.info(f"[show_date_object_type_reports] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(reports)}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    for report in reports:
        logger.info(f"[show_date_object_type_reports] –û—Ç—á–µ—Ç: id={report.id}, date={report.date}, type={report.type}, report_type={report.report_type}, status={report.status}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ –∏ —Ç–∏–ø—É (—É—Ç—Ä–µ–Ω–Ω–∏–π/–≤–µ—á–µ—Ä–Ω–∏–π)
    filtered_reports = []
    for report in reports:
        if report.date.date() == date.date():
            logger.info(f"[show_date_object_type_reports] –û—Ç—á–µ—Ç {report.id} —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ –¥–∞—Ç–µ")
            if report.type == report_type:
                logger.info(f"[show_date_object_type_reports] –û—Ç—á–µ—Ç {report.id} —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ —Ç–∏–ø—É –æ—Ç—á–µ—Ç–∞")
                filtered_reports.append(report)
            else:
                logger.info(f"[show_date_object_type_reports] –û—Ç—á–µ—Ç {report.id} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ —Ç–∏–ø—É –æ—Ç—á–µ—Ç–∞: {report.type} != {report_type}")
        else:
            logger.info(f"[show_date_object_type_reports] –û—Ç—á–µ—Ç {report.id} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ –¥–∞—Ç–µ: {report.date.date()} != {date.date()}")
    
    logger.info(f"[show_date_object_type_reports] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ –∏ —Ç–∏–ø—É: {len(filtered_reports)}")
    
    if filtered_reports:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç—á–µ—Ç–∞–º–∏
        keyboard = []
        for report in filtered_reports:
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "‚úÖ" if report.status == "sent" else "üìù"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–æ–º —Ä–∞–±–æ—Ç
            work_type = report.report_type or "–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã"
            button_text = f"{status_emoji} {report.date.strftime('%H:%M')} - {work_type}"
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏: –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton(text=button_text, callback_data=f"edit_report_{report.id}"),
                InlineKeyboardButton(text="üóëÔ∏è", callback_data=f"delete_report_{report.id}")
            ])
            
            logger.info(f"[show_date_object_type_reports] –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button_text}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYYMMDD –¥–ª—è callback_data
        date_for_callback = date.strftime('%Y%m%d')
        keyboard.append([InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", callback_data=f"export_pdf_{object_id}_{date_for_callback}_{report_type}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"date_object_reports_{date_str}_{object_id}")])
        
        await callback.message.edit_text(
            f"{type_name} –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}' –∑–∞ {date.strftime('%d.%m.%Y')}:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await callback.message.edit_text(
            f"{type_name} –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}' –∑–∞ {date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"date_object_reports_{date_str}_{object_id}")]
            ])
        )

@admin_report_menu_router.callback_query(F.data == "show_all_reports")
@error_handler
@with_session
async def show_all_reports(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º"""
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
    grouped_reports = await get_reports_grouped_by_objects(session, callback.from_user.id)
    
    if grouped_reports:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
        keyboard = []
        for object_id, reports in grouped_reports.items():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
            object_info = await get_object_by_id(session, object_id)
            if not object_info:
                continue
                
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
            report_count = len(reports)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
            button_text = f"üèóÔ∏è {object_info.name} ({report_count} –æ—Ç—á–µ—Ç–æ–≤)"
            callback_data = f"object_reports_{object_id}"
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")])
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")]
            ])
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç—É
@admin_report_menu_router.callback_query(F.data.startswith("object_reports_"))
@error_handler
@with_session
async def show_object_reports(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
    logger.info(f"[show_object_reports] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback.data}")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
    object_id = int(callback.data.split("_")[2])
    logger.info(f"[show_object_reports] –ò–∑–≤–ª–µ—á–µ–Ω object_id: {object_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    object_info = await get_object_by_id(session, object_id)
    if not object_info:
        logger.error(f"[show_object_reports] –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {object_id}")
        await callback.message.edit_text(
            "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_all_reports")]
            ])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
    reports = await get_reports_by_object(session, object_id)
    logger.info(f"[show_object_reports] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(reports)}")
    
    if reports:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
        reports_by_date = {}
        for report in reports:
            date_str = report.date.strftime('%Y-%m-%d')
            if date_str not in reports_by_date:
                reports_by_date[date_str] = []
            reports_by_date[date_str].append(report)
        
        logger.info(f"[show_object_reports] –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –¥–∞—Ç–∞–º: {list(reports_by_date.keys())}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
        keyboard = []
        for date_str, date_reports in sorted(reports_by_date.items(), reverse=True):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
            formatted_date = date_obj.strftime('%d.%m.%Y')
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –¥–∞—Ç—É
            report_count = len(date_reports)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–∞—Ç—ã
            button_text = f"üìÖ {formatted_date} ({report_count} –æ—Ç—á–µ—Ç–æ–≤)"
            callback_data = f"date_object_reports_{date_str}_{object_id}"
            logger.info(f"[show_object_reports] –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button_text} —Å callback_data: {callback_data}")
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_all_reports")])
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}':",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await callback.message.edit_text(
            f"–û—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_all_reports")]
            ])
        )

@admin_report_menu_router.callback_query(F.data.startswith("object_date_reports_"))
@error_handler
@with_session
async def show_object_date_reports(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤ (—É—Ç—Ä–µ–Ω–Ω–∏–π/–≤–µ—á–µ—Ä–Ω–∏–π) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏ –¥–∞—Ç—É –∏–∑ callback_data
    parts = callback.data.split("_")
    object_id = int(parts[3])
    date_str = parts[4]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
    date = datetime.strptime(date_str, '%Y-%m-%d')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    object_info = await get_object_by_id(session, object_id)
    if not object_info:
        await callback.message.edit_text(
            "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_all_reports")]
            ])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
    reports = await get_reports_by_object(session, object_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
    filtered_reports = [r for r in reports if r.date.date() == date.date()]
    
    if filtered_reports:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ —Ç–∏–ø—É (—É—Ç—Ä–µ–Ω–Ω–∏–π/–≤–µ—á–µ—Ä–Ω–∏–π)
        reports_by_type = {}
        for report in filtered_reports:
            report_type = report.type
            if report_type not in reports_by_type:
                reports_by_type[report_type] = []
            reports_by_type[report_type].append(report)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
        keyboard = []
        for report_type, type_reports in reports_by_type.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
            type_emoji = "üåÖ" if report_type == "morning" else "üåÜ"
            type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            report_count = len(type_reports)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
            button_text = f"{type_emoji} {type_name} ({report_count} –æ—Ç—á–µ—Ç–æ–≤)"
            callback_data = f"object_date_type_reports_{object_id}_{date_str}_{report_type}"
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"object_reports_{object_id}")])
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}' –∑–∞ {date.strftime('%d.%m.%Y')}:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await callback.message.edit_text(
            f"–û—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}' –∑–∞ {date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"object_reports_{object_id}")]
            ])
        )

@admin_report_menu_router.callback_query(F.data.startswith("object_date_type_reports_"))
@error_handler
@with_session
async def show_object_date_type_reports(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞, –¥–∞—Ç—É –∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
    parts = callback.data.split("_")
    object_id = int(parts[4])
    date_str = parts[5]
    report_type = parts[6]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
    date = datetime.strptime(date_str, '%Y-%m-%d')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
    object_info = await get_object_by_id(session, object_id)
    if not object_info:
        await callback.message.edit_text(
            "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_all_reports")]
            ])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
    reports = await get_reports_by_object(session, object_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ –∏ —Ç–∏–ø—É
    filtered_reports = [r for r in reports if r.date.date() == date.date() and r.type == report_type]
    
    if filtered_reports:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        type_name = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if report_type == "morning_report" else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç—á–µ—Ç–∞–º–∏
        keyboard = []
        for report in filtered_reports:
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "‚úÖ" if report.status == "sent" else "üìù"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–æ–º —Ä–∞–±–æ—Ç
            work_type = report.report_type or "–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã"
            button_text = f"{status_emoji} {report.date.strftime('%H:%M')} - {work_type}"
            callback_data = f"edit_report_{report.id}"
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYYMMDD –¥–ª—è callback_data
        date_for_callback = date.strftime('%Y%m%d')
        keyboard.append([InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", callback_data=f"export_pdf_{object_id}_{date_for_callback}_{report_type}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"object_date_reports_{object_id}_{date_str}")])
        
        await callback.message.edit_text(
            f"{type_name} –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}' –∑–∞ {date.strftime('%d.%m.%Y')}:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await callback.message.edit_text(
            f"{type_name} –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_info.name}' –∑–∞ {date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"object_date_reports_{object_id}_{date_str}")]
            ])
        )

@admin_report_menu_router.message(Command("reports"))
@error_handler
async def cmd_reports(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reports"""
    await state.set_state(ReportManagementStates.waiting_for_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_report_type_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
def get_report_type_keyboard():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£—Ç—Ä–µ–Ω–Ω–∏–π", callback_data="morning_report")],
        [InlineKeyboardButton(text="–í–µ—á–µ—Ä–Ω–∏–π", callback_data="evening_report")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_report_menu")]
    ])
    return keyboard

@admin_report_menu_router.callback_query(F.data == "delete_report_7")
@error_handler
@with_session
async def delete_report_7(callback: CallbackQuery, session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ #7"""
    try:
        # –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç
        success = await delete_report(session, 7)
        
        if success:
            await callback.message.edit_text(
                "–û—Ç—á–µ—Ç #7 —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_all_reports")]
                ])
            )
        else:
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ #7.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_all_reports")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ #7: {str(e)}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_all_reports")]
            ])
        ) 

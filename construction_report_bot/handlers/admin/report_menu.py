import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
from typing import List

from construction_report_bot.database.crud import (
    get_all_reports,
    get_report_by_id,
    get_reports_by_status,
    get_all_objects,
    get_all_itr,
    get_reports_by_object,
    get_reports_by_itr,
    get_reports_by_type,
    get_reports_by_date,
    get_object_by_id
)
from construction_report_bot.config.keyboards import get_admin_report_menu_keyboard, get_back_keyboard
from construction_report_bot.utils.decorators import error_handler, with_session
from construction_report_bot.middlewares.role_check import admin_required
from construction_report_bot.utils.logging.logger import log_admin_action, log_error
from construction_report_bot.states.report_states import ReportStates, ReportManagementStates
from construction_report_bot.services.report_service import ReportService

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_report_menu_router = Router()
# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
admin_report_menu_router.message.middleware(admin_required())
admin_report_menu_router.callback_query.middleware(admin_required())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_report_menu_router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞–º–∏")
async def show_admin_report_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    keyboard = await get_admin_report_menu_keyboard()
    await message.answer(
        "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=keyboard
    )

@admin_report_menu_router.callback_query(F.data == "admin_report_menu")
async def show_admin_report_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ callback"""
    keyboard = await get_admin_report_menu_keyboard()
    await callback.message.edit_text(
        "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=keyboard
    )

@admin_report_menu_router.callback_query(F.data == "my_reports")
@error_handler
@with_session
async def process_my_reports(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ
    keyboard = [
        [InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="filter_reports_date")],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="show_all_reports")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_report_menu")]
    ]
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@admin_report_menu_router.callback_query(F.data.startswith("filter_reports_"))
@error_handler
@with_session
async def apply_report_filter(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ –æ—Ç—á–µ—Ç–∞–º"""
    filter_type = callback.data.replace("filter_reports_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(filter_type=filter_type)
    
    if filter_type == "date":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")]
            ])
        )
        await state.set_state(ReportStates.waiting_for_date)

@admin_report_menu_router.message(ReportStates.waiting_for_date)
@error_handler
@with_session
async def process_date_filter(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date = datetime.strptime(message.text, "%d.%m.%Y")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
        reports = await get_reports_by_date(session, date)
        
        if reports:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç—á–µ—Ç–∞–º–∏
            keyboard = []
            for report in reports:
                report_object = await get_object_by_id(session, report.object_id)
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = "‚úÖ" if report.status == "completed" else "üìù"
                button_text = f"{status_emoji} {report_object.name} {report.type} –æ—Ç {report.date.strftime('%d.%m.%Y %H:%M')}"
                callback_data = f"edit_report_{report.id}"
                keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")])
            
            await message.answer(
                f"–û—Ç—á–µ—Ç—ã –∑–∞ {date.strftime('%d.%m.%Y')}:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        else:
            await message.answer(
                f"–û—Ç—á–µ—Ç–æ–≤ –∑–∞ {date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")]
                ])
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")]
            ])
        )

@admin_report_menu_router.callback_query(F.data == "show_all_reports")
@error_handler
@with_session
async def show_all_reports(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reports = await get_all_reports(session, callback.from_user.id)
    
    if reports:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç—á–µ—Ç–∞–º–∏
        keyboard = []
        for report in reports:

            report_object = await get_object_by_id(session, report.object_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "‚úÖ" if report.status == "sent" else "üìù"
            button_text = f"{status_emoji} {report_object.name} {report.type} –æ—Ç {report.date.strftime('%d.%m.%Y %H:%M')}"
            callback_data = f"edit_report_{report.id}"
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            delete_button_text = f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"
            delete_callback_data = f"delete_report_{report.id}"
            keyboard.append([InlineKeyboardButton(text=delete_button_text, callback_data=delete_callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")])
        
        await callback.message.edit_text(
            "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_reports")]
            ])
        )

@admin_report_menu_router.message(Command("reports"))
@error_handler
async def cmd_reports(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reports"""
    await state.set_state(ReportManagementStates.waiting_for_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_report_type_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
def get_report_type_keyboard():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£—Ç—Ä–µ–Ω–Ω–∏–π", callback_data="morning_report")],
        [InlineKeyboardButton(text="–í–µ—á–µ—Ä–Ω–∏–π", callback_data="evening_report")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_report_menu")]
    ])
    return keyboard 

from aiogram import Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
import logging

from construction_report_bot.middlewares.role_check import admin_required
from construction_report_bot.database.crud import (
    get_all_clients, create_client, update_client, delete_client,
    create_user, get_client_by_id
)
from construction_report_bot.config.keyboards import (
    get_client_management_keyboard, get_back_keyboard, get_admin_keyboard
)
from construction_report_bot.config.settings import settings
from construction_report_bot.utils.decorators import error_handler, extract_id_from_callback, with_session
from construction_report_bot.utils.validators import (
    validate_full_name, validate_organization, validate_contact_info, generate_access_code
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏
admin_client_router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
admin_client_router.message.middleware(admin_required())
admin_client_router.callback_query.middleware(admin_required())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏
class ClientManagementStates(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_organization = State()
    waiting_for_contact_info = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞
class ClientEditStates(StatesGroup):
    waiting_for_new_full_name = State()
    waiting_for_new_organization = State()
    waiting_for_new_contact_info = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏
@admin_client_router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏")
@error_handler
async def cmd_client_management(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏"""
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_client_management_keyboard()
    )

@admin_client_router.callback_query(F.data == "client_list")
@error_handler
@with_session
async def process_client_list(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    clients = await get_all_clients(session)
    
    if clients:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
        clients_text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:\n\n"
        for i, client in enumerate(clients, start=1):
            try:
                access_code = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                if client.user and client.user.access_code:
                    access_code = client.user.access_code
                
                clients_text += (
                    f"{i}. {client.full_name}\n"
                    f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {client.organization}\n"
                    f"   –ö–æ–Ω—Ç–∞–∫—Ç—ã: {client.contact_info}\n"
                    f"   –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: {access_code}\n\n"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ {client.id}: {e}")
                clients_text += (
                    f"{i}. {client.full_name}\n"
                    f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {client.organization}\n"
                    f"   –ö–æ–Ω—Ç–∞–∫—Ç—ã: {client.contact_info}\n"
                    f"   –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è\n\n"
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏ –∏—Ö ID
        for client in clients:
            logging.info(f"–ö–ª–∏–µ–Ω—Ç: {client.full_name}, ID: {client.id}")
            callback_data = f"edit_client_{client.id}"
            logging.info(f"Callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏: {callback_data}")
            
            builder.row(
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è {client.full_name}",
                    callback_data=callback_data
                )
            )
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="client_back"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (callback.message.text != clients_text or 
            callback.message.reply_markup != builder.as_markup()):
            await callback.message.edit_text(
                clients_text,
                reply_markup=builder.as_markup()
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback.answer("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∞–∫—Ç—É–∞–ª–µ–Ω")
    else:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_back_keyboard()
        )

@admin_client_router.callback_query(F.data == "client_add")
@error_handler
async def process_client_add(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
    )
    
    await state.set_state(ClientManagementStates.waiting_for_full_name)

@admin_client_router.message(ClientManagementStates.waiting_for_full_name)
@error_handler
async def process_client_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    full_name = message.text.strip()
    
    if not validate_full_name(full_name):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
        )
        return
    
    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞:")
    await state.set_state(ClientManagementStates.waiting_for_organization)

@admin_client_router.message(ClientManagementStates.waiting_for_organization)
@error_handler
async def process_client_organization(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    organization = message.text.strip()
    
    if not validate_organization(organization):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        return
    
    await state.update_data(organization=organization)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞–∫–∞–∑—á–∏–∫–∞\n"
        "(—Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ email):"
    )
    await state.set_state(ClientManagementStates.waiting_for_contact_info)

@admin_client_router.message(ClientManagementStates.waiting_for_contact_info)
@error_handler
@with_session
async def process_client_contact_info(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    contact_info = message.text.strip()
    
    if not validate_contact_info(contact_info):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ "
            "–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (+7XXXXXXXXXX) –∏–ª–∏ email:"
        )
        return
    
    user_data = await state.get_data()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞
    access_code = generate_access_code()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await create_user(session, {
        "role": settings.CLIENT_ROLE,
        "access_code": access_code,
        "username": user_data["full_name"]
    })
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await create_client(session, {
        "user_id": user.id,
        "full_name": user_data["full_name"],
        "organization": user_data["organization"],
        "contact_info": contact_info
    })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞
    await message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—á–∏–∫–µ:\n"
        f"–§–ò–û: {user_data['full_name']}\n"
        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user_data['organization']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact_info}\n\n"
        f"üîë –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞: `{access_code}`\n\n"
        f"–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∑–∞–∫–∞–∑—á–∏–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.",
        parse_mode="Markdown"
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞
@admin_client_router.callback_query(lambda c: c.data.startswith("edit_client_") and not any(x in c.data for x in ["name", "org", "contact"]))
@error_handler
@with_session
async def process_client_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "edit_client_ID"
    client_id = extract_id_from_callback(callback.data, "edit_client_")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
    client = await get_client_by_id(session, client_id)
    
    if not client:
        logging.error(f"–ó–∞–∫–∞–∑—á–∏–∫ —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "–ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑—á–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(client_id=client_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data=f"edit_client_name_{client_id}"),
        InlineKeyboardButton(text="üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", callback_data=f"edit_client_org_{client_id}")
    )
    builder.row(
        InlineKeyboardButton(text="üìû –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data=f"edit_client_contact_{client_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data=f"delete_client_{client_id}")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="client_list"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    new_text = (
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞:\n\n"
        f"–§–ò–û: {client.full_name}\n"
        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {client.organization}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {client.contact_info}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(
            text=new_text,
            reply_markup=builder.as_markup()
        )
    except Exception as edit_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.answer("–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã")

@admin_client_router.callback_query(F.data.startswith("delete_client_"))
@error_handler
async def process_client_delete(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "delete_client_ID"
    client_id = extract_id_from_callback(callback.data, "delete_client_")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"client_delete_confirm_{client_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_client_{client_id}")
    )
    
    try:
        await callback.message.edit_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@admin_client_router.callback_query(F.data.startswith("client_delete_confirm_"))
@error_handler
@with_session
async def process_confirm_delete_client(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split("_")[-1])
    
    client = await get_client_by_id(session, client_id)
    if not client:
        await callback.message.edit_text(
            "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=await get_admin_keyboard()
        )
        return
    
    full_name = client.full_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    
    try:
        await delete_client(session, client_id)
        
        logging.info(f"–ö–ª–∏–µ–Ω—Ç {full_name} (ID: {client_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        
        await callback.message.edit_text(
            f"‚úÖ –ö–ª–∏–µ–Ω—Ç {full_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=await get_admin_keyboard()
        )
    except Exception as e:
        # –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {full_name} (ID: {client_id}): {str(e)}")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞."
        if "ForeignKeyViolationError" in str(e):
            error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑-–∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        
        await callback.message.edit_text(
            f"‚ùå {error_message}",
            reply_markup=await get_admin_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∑–∞–∫–∞–∑—á–∏–∫–∞
@admin_client_router.callback_query(F.data.startswith("edit_client_name_"))
@error_handler
@with_session
async def process_edit_client_name(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    await callback.answer()
    
    # –í—ã–¥–µ–ª—è–µ–º ID –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "edit_client_name_ID"
    client_id = extract_id_from_callback(callback.data, "edit_client_name_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client = await get_client_by_id(session, client_id)
    if not client:
        logging.error(f"–ó–∞–∫–∞–∑—á–∏–∫ —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "–ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.update_data(client_id=client_id)
    
    try:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
        )
        await state.set_state(ClientEditStates.waiting_for_new_full_name)
    except Exception as edit_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
        )
        await state.set_state(ClientEditStates.waiting_for_new_full_name)

@admin_client_router.message(ClientEditStates.waiting_for_new_full_name)
@error_handler
@with_session
async def process_new_client_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    full_name = message.text.strip()
    
    if not validate_full_name(full_name):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
        )
        return
    
    user_data = await state.get_data()
    client_id = user_data["client_id"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞
    await update_client(session, client_id, {"full_name": full_name})
    
    await message.answer(
        f"‚úÖ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {full_name}",
        reply_markup=get_back_keyboard()
    )
    
    await state.clear()

@admin_client_router.callback_query(F.data.startswith("edit_client_org_"))
@error_handler
@with_session
async def process_edit_client_org(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    await callback.answer()
    
    # –í—ã–¥–µ–ª—è–µ–º ID –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "edit_client_org_ID"
    client_id = extract_id_from_callback(callback.data, "edit_client_org_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client = await get_client_by_id(session, client_id)
    if not client:
        logging.error(f"–ó–∞–∫–∞–∑—á–∏–∫ —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "–ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.update_data(client_id=client_id)
    
    try:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞:"
        )
        await state.set_state(ClientEditStates.waiting_for_new_organization)
    except Exception as edit_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞:"
        )
        await state.set_state(ClientEditStates.waiting_for_new_organization)

@admin_client_router.message(ClientEditStates.waiting_for_new_organization)
@error_handler
@with_session
async def process_new_client_org(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    organization = message.text.strip()
    
    if not validate_organization(organization):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        return
    
    user_data = await state.get_data()
    client_id = user_data["client_id"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∑–∞–∫–∞–∑—á–∏–∫–∞
    await update_client(session, client_id, {"organization": organization})
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {organization}",
        reply_markup=get_back_keyboard()
    )
    
    await state.clear()

@admin_client_router.callback_query(F.data.startswith("edit_client_contact_"))
@error_handler
@with_session
async def process_edit_client_contact(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    await callback.answer()
    
    # –í—ã–¥–µ–ª—è–µ–º ID –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "edit_client_contact_ID"
    client_id = extract_id_from_callback(callback.data, "edit_client_contact_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client = await get_client_by_id(session, client_id)
    if not client:
        logging.error(f"–ó–∞–∫–∞–∑—á–∏–∫ —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "–ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.update_data(client_id=client_id)
    
    try:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞–∫–∞–∑—á–∏–∫–∞\n"
            "(—Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ email):"
        )
        await state.set_state(ClientEditStates.waiting_for_new_contact_info)
    except Exception as edit_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞–∫–∞–∑—á–∏–∫–∞\n"
            "(—Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ email):"
        )
        await state.set_state(ClientEditStates.waiting_for_new_contact_info)

@admin_client_router.message(ClientEditStates.waiting_for_new_contact_info)
@error_handler
@with_session
async def process_new_client_contact(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    contact_info = message.text.strip()
    
    if not validate_contact_info(contact_info):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ "
            "–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (+7XXXXXXXXXX) –∏–ª–∏ email:"
        )
        return
    
    user_data = await state.get_data()
    client_id = user_data["client_id"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞–∫–∞–∑—á–∏–∫–∞
    await update_client(session, client_id, {"contact_info": contact_info})
    
    await message.answer(
        f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {contact_info}",
        reply_markup=get_back_keyboard()
    )
    
    await state.clear()

# –ù–∞—Å—Ç—Ä–æ–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
@admin_client_router.callback_query(F.data == "client_back")
@error_handler
async def process_client_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_client_management_keyboard()
    )

@admin_client_router.callback_query(F.data == "client_edit")
@error_handler
@with_session
async def process_client_edit_menu(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    clients = await get_all_clients(session)
    
    if not clients:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    clients_text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for i, client in enumerate(clients, start=1):
        clients_text += (
            f"{i}. {client.full_name}\n"
            f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {client.organization}\n"
            f"   –ö–æ–Ω—Ç–∞–∫—Ç—ã: {client.contact_info}\n\n"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    for client in clients:
        builder.row(
            InlineKeyboardButton(
                text=f"‚úèÔ∏è {client.full_name}",
                callback_data=f"edit_client_{client.id}"
            )
        )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="client_back"))
    
    await callback.message.edit_text(
        clients_text,
        reply_markup=builder.as_markup()
    )

@admin_client_router.callback_query(F.data == "client_delete")
@error_handler
@with_session
async def process_client_delete_menu(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    clients = await get_all_clients(session)
    
    if not clients:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    clients_text = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for i, client in enumerate(clients, start=1):
        clients_text += (
            f"{i}. {client.full_name}\n"
            f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {client.organization}\n"
            f"   –ö–æ–Ω—Ç–∞–∫—Ç—ã: {client.contact_info}\n\n"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    for client in clients:
        builder.row(
            InlineKeyboardButton(
                text=f"üóëÔ∏è {client.full_name}",
                callback_data=f"client_delete_confirm_{client.id}"
            )
        )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="client_back"))
    
    await callback.message.edit_text(
        clients_text,
        reply_markup=builder.as_markup()
    )

@admin_client_router.callback_query(F.data == "admin_back")
@error_handler
@with_session
async def process_admin_back(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    ) 
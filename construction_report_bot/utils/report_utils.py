from datetime import datetime
from typing import List, Dict, Any, Optional
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from construction_report_bot.database.models import Report, Client, Object
from construction_report_bot.utils.exceptions import ValidationError

def validate_date_range(date_str: str) -> tuple[datetime, datetime]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
    try:
        start_date_str, end_date_str = date_str.split("-")
        start_date = datetime.strptime(start_date_str.strip(), "%d.%m.%Y")
        end_date = datetime.strptime(end_date_str.strip(), "%d.%m.%Y")
        
        if start_date > end_date:
            raise ValidationError("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π")
            
        return start_date, end_date
    except ValueError:
        raise ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")

async def get_reports_by_date_range(
    session: AsyncSession,
    start_date: datetime,
    end_date: datetime,
    client_id: Optional[int] = None,
    object_id: Optional[int] = None
) -> List[Report]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    query = select(Report).where(
        Report.date.between(start_date, end_date)
    )
    
    if client_id:
        query = query.where(Report.client_id == client_id)
    if object_id:
        query = query.where(Report.object_id == object_id)
        
    result = await session.execute(query)
    return result.scalars().all()

async def generate_report_summary(
    session: AsyncSession,
    reports: List[Report]
) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –æ—Ç—á–µ—Ç–∞–º"""
    total_reports = len(reports)
    clients = set()
    objects = set()
    
    for report in reports:
        clients.add(report.client_id)
        objects.add(report.object_id)
    
    return {
        "total_reports": total_reports,
        "unique_clients": len(clients),
        "unique_objects": len(objects),
        "period_start": min(r.date for r in reports),
        "period_end": max(r.date for r in reports)
    }

async def format_report_message(
    session: AsyncSession,
    report_type: str,
    filter_type: str,
    summary: Dict[str, Any]
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç—á–µ—Ç–æ–º"""
    message = f"üìä –û—Ç—á–µ—Ç –ø–æ —Ç–∏–ø—É: {report_type}\n"
    message += f"–§–∏–ª—å—Ç—Ä: {filter_type}\n\n"
    
    message += f"–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {summary['total_reports']}\n"
    message += f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {summary['unique_clients']}\n"
    message += f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {summary['unique_objects']}\n"
    message += f"–ü–µ—Ä–∏–æ–¥: {summary['period_start'].strftime('%d.%m.%Y')} - {summary['period_end'].strftime('%d.%m.%Y')}\n"
    
    return message 
import logging
import functools
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from typing import Callable, Any, Union, Dict

def error_handler(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö.
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery)
            event = args[0] if args else None
            
            error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
            
            if isinstance(event, CallbackQuery):
                try:
                    await event.message.edit_text(error_text, reply_markup=builder.as_markup())
                except Exception:
                    await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            elif isinstance(event, Message):
                await event.answer(error_text, reply_markup=builder.as_markup())
    
    return wrapper

def extract_id_from_callback(callback_data: str, prefix: str) -> int:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∏–∑ —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
    –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "edit_client_123" —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "edit_client_" –∏–∑–≤–ª–µ—á–µ—Ç 123.
    
    Args:
        callback_data: –°—Ç—Ä–æ–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–ª–µ–¥—É–µ—Ç ID
        
    Returns:
        int: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π ID
        
    Raises:
        ValueError: –ï—Å–ª–∏ ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω
    """
    if not callback_data.startswith(prefix):
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}, –æ–∂–∏–¥–∞–ª—Å—è –ø—Ä–µ—Ñ–∏–∫—Å {prefix}")
    
    id_str = callback_data[len(prefix):]
    try:
        return int(id_str)
    except ValueError:
        raise ValueError(f"ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {id_str} –≤ {callback_data}")

def with_session(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é, –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        from construction_report_bot.database.session import get_session
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
        session_gen = get_session()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
            session = await session_gen.__anext__()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            result = await func(*args, session=session, **kwargs)
            
            return result
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__} —Å —Å–µ—Å—Å–∏–µ–π –ë–î: {e}")
            raise
        finally:
            try:
                await session.close()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    
    return wrapper 